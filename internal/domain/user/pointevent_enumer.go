// Code generated by "enumer -type=PointEvent -transform=snake -trimprefix=PointEvent"; DO NOT EDIT.

package user

import (
	"fmt"
	"strings"
)

const _PointEventName = "reviewlikebe_likedadmin_changeinittransfer_intransfer_outrewardpunishwithdrawconsumeredeem"

var _PointEventIndex = [...]uint8{0, 6, 10, 18, 30, 34, 45, 57, 63, 69, 77, 84, 90}

const _PointEventLowerName = "reviewlikebe_likedadmin_changeinittransfer_intransfer_outrewardpunishwithdrawconsumeredeem"

func (i PointEvent) String() string {
	if i < 0 || i >= PointEvent(len(_PointEventIndex)-1) {
		return fmt.Sprintf("PointEvent(%d)", i)
	}
	return _PointEventName[_PointEventIndex[i]:_PointEventIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _PointEventNoOp() {
	var x [1]struct{}
	_ = x[PointEventReview-(0)]
	_ = x[PointEventLike-(1)]
	_ = x[PointEventBeLiked-(2)]
	_ = x[PointEventAdminChange-(3)]
	_ = x[PointEventInit-(4)]
	_ = x[PointEventTransferIn-(5)]
	_ = x[PointEventTransferOut-(6)]
	_ = x[PointEventReward-(7)]
	_ = x[PointEventPunish-(8)]
	_ = x[PointEventWithdraw-(9)]
	_ = x[PointEventConsume-(10)]
	_ = x[PointEventRedeem-(11)]
}

var _PointEventValues = []PointEvent{PointEventReview, PointEventLike, PointEventBeLiked, PointEventAdminChange, PointEventInit, PointEventTransferIn, PointEventTransferOut, PointEventReward, PointEventPunish, PointEventWithdraw, PointEventConsume, PointEventRedeem}

var _PointEventNameToValueMap = map[string]PointEvent{
	_PointEventName[0:6]:        PointEventReview,
	_PointEventLowerName[0:6]:   PointEventReview,
	_PointEventName[6:10]:       PointEventLike,
	_PointEventLowerName[6:10]:  PointEventLike,
	_PointEventName[10:18]:      PointEventBeLiked,
	_PointEventLowerName[10:18]: PointEventBeLiked,
	_PointEventName[18:30]:      PointEventAdminChange,
	_PointEventLowerName[18:30]: PointEventAdminChange,
	_PointEventName[30:34]:      PointEventInit,
	_PointEventLowerName[30:34]: PointEventInit,
	_PointEventName[34:45]:      PointEventTransferIn,
	_PointEventLowerName[34:45]: PointEventTransferIn,
	_PointEventName[45:57]:      PointEventTransferOut,
	_PointEventLowerName[45:57]: PointEventTransferOut,
	_PointEventName[57:63]:      PointEventReward,
	_PointEventLowerName[57:63]: PointEventReward,
	_PointEventName[63:69]:      PointEventPunish,
	_PointEventLowerName[63:69]: PointEventPunish,
	_PointEventName[69:77]:      PointEventWithdraw,
	_PointEventLowerName[69:77]: PointEventWithdraw,
	_PointEventName[77:84]:      PointEventConsume,
	_PointEventLowerName[77:84]: PointEventConsume,
	_PointEventName[84:90]:      PointEventRedeem,
	_PointEventLowerName[84:90]: PointEventRedeem,
}

var _PointEventNames = []string{
	_PointEventName[0:6],
	_PointEventName[6:10],
	_PointEventName[10:18],
	_PointEventName[18:30],
	_PointEventName[30:34],
	_PointEventName[34:45],
	_PointEventName[45:57],
	_PointEventName[57:63],
	_PointEventName[63:69],
	_PointEventName[69:77],
	_PointEventName[77:84],
	_PointEventName[84:90],
}

// PointEventString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func PointEventString(s string) (PointEvent, error) {
	if val, ok := _PointEventNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _PointEventNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to PointEvent values", s)
}

// PointEventValues returns all values of the enum
func PointEventValues() []PointEvent {
	return _PointEventValues
}

// PointEventStrings returns a slice of all String values of the enum
func PointEventStrings() []string {
	strs := make([]string, len(_PointEventNames))
	copy(strs, _PointEventNames)
	return strs
}

// IsAPointEvent returns "true" if the value is listed in the enum definition. "false" otherwise
func (i PointEvent) IsAPointEvent() bool {
	for _, v := range _PointEventValues {
		if i == v {
			return true
		}
	}
	return false
}
