// Code generated by "enumer -type=Reaction -transform=snake -trimprefix=Reaction"; DO NOT EDIT.

package reaction

import (
	"fmt"
	"strings"
)

const _ReactionName = "nonelikedislike"

var _ReactionIndex = [...]uint8{0, 4, 8, 15}

const _ReactionLowerName = "nonelikedislike"

func (i Reaction) String() string {
	if i < 0 || i >= Reaction(len(_ReactionIndex)-1) {
		return fmt.Sprintf("Reaction(%d)", i)
	}
	return _ReactionName[_ReactionIndex[i]:_ReactionIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ReactionNoOp() {
	var x [1]struct{}
	_ = x[ReactionNone-(0)]
	_ = x[ReactionLike-(1)]
	_ = x[ReactionDislike-(2)]
}

var _ReactionValues = []Reaction{ReactionNone, ReactionLike, ReactionDislike}

var _ReactionNameToValueMap = map[string]Reaction{
	_ReactionName[0:4]:       ReactionNone,
	_ReactionLowerName[0:4]:  ReactionNone,
	_ReactionName[4:8]:       ReactionLike,
	_ReactionLowerName[4:8]:  ReactionLike,
	_ReactionName[8:15]:      ReactionDislike,
	_ReactionLowerName[8:15]: ReactionDislike,
}

var _ReactionNames = []string{
	_ReactionName[0:4],
	_ReactionName[4:8],
	_ReactionName[8:15],
}

// ReactionString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ReactionString(s string) (Reaction, error) {
	if val, ok := _ReactionNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ReactionNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Reaction values", s)
}

// ReactionValues returns all values of the enum
func ReactionValues() []Reaction {
	return _ReactionValues
}

// ReactionStrings returns a slice of all String values of the enum
func ReactionStrings() []string {
	strs := make([]string, len(_ReactionNames))
	copy(strs, _ReactionNames)
	return strs
}

// IsAReaction returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Reaction) IsAReaction() bool {
	for _, v := range _ReactionValues {
		if i == v {
			return true
		}
	}
	return false
}
