// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"jcourse_go/model/po"
)

func newCoursePO(db *gorm.DB, opts ...gen.DOOption) coursePO {
	_coursePO := coursePO{}

	_coursePO.coursePODo.UseDB(db, opts...)
	_coursePO.coursePODo.UseModel(&po.CoursePO{})

	tableName := _coursePO.coursePODo.TableName()
	_coursePO.ALL = field.NewAsterisk(tableName)
	_coursePO.ID = field.NewInt64(tableName, "id")
	_coursePO.CreatedAt = field.NewTime(tableName, "created_at")
	_coursePO.UpdatedAt = field.NewTime(tableName, "updated_at")
	_coursePO.Code = field.NewString(tableName, "code")
	_coursePO.Name = field.NewString(tableName, "name")
	_coursePO.Credit = field.NewFloat64(tableName, "credit")
	_coursePO.MainTeacherID = field.NewInt64(tableName, "main_teacher_id")
	_coursePO.MainTeacherName = field.NewString(tableName, "main_teacher_name")
	_coursePO.Department = field.NewString(tableName, "department")
	_coursePO.RatingCount = field.NewInt64(tableName, "rating_count")
	_coursePO.RatingAvg = field.NewFloat64(tableName, "rating_avg")
	_coursePO.SearchIndex = field.NewField(tableName, "search_index")
	_coursePO.Categories = coursePOHasManyCategories{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Categories", "po.CourseCategoryPO"),
		Course: struct {
			field.RelationField
			MainTeacher struct {
				field.RelationField
				Courses struct {
					field.RelationField
				}
			}
			Categories struct {
				field.RelationField
			}
			OfferedCourses struct {
				field.RelationField
				Course struct {
					field.RelationField
				}
				MainTeacher struct {
					field.RelationField
				}
				OfferedCourseTeacher struct {
					field.RelationField
					Course struct {
						field.RelationField
					}
					OfferedCourse struct {
						field.RelationField
					}
					MainTeacher struct {
						field.RelationField
					}
					Teacher struct {
						field.RelationField
					}
				}
			}
		}{
			RelationField: field.NewRelation("Categories.Course", "po.CoursePO"),
			MainTeacher: struct {
				field.RelationField
				Courses struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Categories.Course.MainTeacher", "po.TeacherPO"),
				Courses: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Categories.Course.MainTeacher.Courses", "po.CoursePO"),
				},
			},
			Categories: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Categories.Course.Categories", "po.CourseCategoryPO"),
			},
			OfferedCourses: struct {
				field.RelationField
				Course struct {
					field.RelationField
				}
				MainTeacher struct {
					field.RelationField
				}
				OfferedCourseTeacher struct {
					field.RelationField
					Course struct {
						field.RelationField
					}
					OfferedCourse struct {
						field.RelationField
					}
					MainTeacher struct {
						field.RelationField
					}
					Teacher struct {
						field.RelationField
					}
				}
			}{
				RelationField: field.NewRelation("Categories.Course.OfferedCourses", "po.OfferedCoursePO"),
				Course: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Categories.Course.OfferedCourses.Course", "po.CoursePO"),
				},
				MainTeacher: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Categories.Course.OfferedCourses.MainTeacher", "po.TeacherPO"),
				},
				OfferedCourseTeacher: struct {
					field.RelationField
					Course struct {
						field.RelationField
					}
					OfferedCourse struct {
						field.RelationField
					}
					MainTeacher struct {
						field.RelationField
					}
					Teacher struct {
						field.RelationField
					}
				}{
					RelationField: field.NewRelation("Categories.Course.OfferedCourses.OfferedCourseTeacher", "po.OfferedCourseTeacherPO"),
					Course: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("Categories.Course.OfferedCourses.OfferedCourseTeacher.Course", "po.CoursePO"),
					},
					OfferedCourse: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("Categories.Course.OfferedCourses.OfferedCourseTeacher.OfferedCourse", "po.OfferedCoursePO"),
					},
					MainTeacher: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("Categories.Course.OfferedCourses.OfferedCourseTeacher.MainTeacher", "po.TeacherPO"),
					},
					Teacher: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("Categories.Course.OfferedCourses.OfferedCourseTeacher.Teacher", "po.TeacherPO"),
					},
				},
			},
		},
	}

	_coursePO.OfferedCourses = coursePOHasManyOfferedCourses{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("OfferedCourses", "po.OfferedCoursePO"),
	}

	_coursePO.MainTeacher = coursePOBelongsToMainTeacher{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("MainTeacher", "po.TeacherPO"),
	}

	_coursePO.fillFieldMap()

	return _coursePO
}

type coursePO struct {
	coursePODo

	ALL             field.Asterisk
	ID              field.Int64
	CreatedAt       field.Time
	UpdatedAt       field.Time
	Code            field.String
	Name            field.String
	Credit          field.Float64
	MainTeacherID   field.Int64
	MainTeacherName field.String
	Department      field.String
	RatingCount     field.Int64
	RatingAvg       field.Float64
	SearchIndex     field.Field
	Categories      coursePOHasManyCategories

	OfferedCourses coursePOHasManyOfferedCourses

	MainTeacher coursePOBelongsToMainTeacher

	fieldMap map[string]field.Expr
}

func (c coursePO) Table(newTableName string) *coursePO {
	c.coursePODo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c coursePO) As(alias string) *coursePO {
	c.coursePODo.DO = *(c.coursePODo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *coursePO) updateTableName(table string) *coursePO {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.Code = field.NewString(table, "code")
	c.Name = field.NewString(table, "name")
	c.Credit = field.NewFloat64(table, "credit")
	c.MainTeacherID = field.NewInt64(table, "main_teacher_id")
	c.MainTeacherName = field.NewString(table, "main_teacher_name")
	c.Department = field.NewString(table, "department")
	c.RatingCount = field.NewInt64(table, "rating_count")
	c.RatingAvg = field.NewFloat64(table, "rating_avg")
	c.SearchIndex = field.NewField(table, "search_index")

	c.fillFieldMap()

	return c
}

func (c *coursePO) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *coursePO) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 15)
	c.fieldMap["id"] = c.ID
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["code"] = c.Code
	c.fieldMap["name"] = c.Name
	c.fieldMap["credit"] = c.Credit
	c.fieldMap["main_teacher_id"] = c.MainTeacherID
	c.fieldMap["main_teacher_name"] = c.MainTeacherName
	c.fieldMap["department"] = c.Department
	c.fieldMap["rating_count"] = c.RatingCount
	c.fieldMap["rating_avg"] = c.RatingAvg
	c.fieldMap["search_index"] = c.SearchIndex

}

func (c coursePO) clone(db *gorm.DB) coursePO {
	c.coursePODo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c coursePO) replaceDB(db *gorm.DB) coursePO {
	c.coursePODo.ReplaceDB(db)
	return c
}

type coursePOHasManyCategories struct {
	db *gorm.DB

	field.RelationField

	Course struct {
		field.RelationField
		MainTeacher struct {
			field.RelationField
			Courses struct {
				field.RelationField
			}
		}
		Categories struct {
			field.RelationField
		}
		OfferedCourses struct {
			field.RelationField
			Course struct {
				field.RelationField
			}
			MainTeacher struct {
				field.RelationField
			}
			OfferedCourseTeacher struct {
				field.RelationField
				Course struct {
					field.RelationField
				}
				OfferedCourse struct {
					field.RelationField
				}
				MainTeacher struct {
					field.RelationField
				}
				Teacher struct {
					field.RelationField
				}
			}
		}
	}
}

func (a coursePOHasManyCategories) Where(conds ...field.Expr) *coursePOHasManyCategories {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a coursePOHasManyCategories) WithContext(ctx context.Context) *coursePOHasManyCategories {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a coursePOHasManyCategories) Session(session *gorm.Session) *coursePOHasManyCategories {
	a.db = a.db.Session(session)
	return &a
}

func (a coursePOHasManyCategories) Model(m *po.CoursePO) *coursePOHasManyCategoriesTx {
	return &coursePOHasManyCategoriesTx{a.db.Model(m).Association(a.Name())}
}

type coursePOHasManyCategoriesTx struct{ tx *gorm.Association }

func (a coursePOHasManyCategoriesTx) Find() (result []*po.CourseCategoryPO, err error) {
	return result, a.tx.Find(&result)
}

func (a coursePOHasManyCategoriesTx) Append(values ...*po.CourseCategoryPO) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a coursePOHasManyCategoriesTx) Replace(values ...*po.CourseCategoryPO) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a coursePOHasManyCategoriesTx) Delete(values ...*po.CourseCategoryPO) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a coursePOHasManyCategoriesTx) Clear() error {
	return a.tx.Clear()
}

func (a coursePOHasManyCategoriesTx) Count() int64 {
	return a.tx.Count()
}

type coursePOHasManyOfferedCourses struct {
	db *gorm.DB

	field.RelationField
}

func (a coursePOHasManyOfferedCourses) Where(conds ...field.Expr) *coursePOHasManyOfferedCourses {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a coursePOHasManyOfferedCourses) WithContext(ctx context.Context) *coursePOHasManyOfferedCourses {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a coursePOHasManyOfferedCourses) Session(session *gorm.Session) *coursePOHasManyOfferedCourses {
	a.db = a.db.Session(session)
	return &a
}

func (a coursePOHasManyOfferedCourses) Model(m *po.CoursePO) *coursePOHasManyOfferedCoursesTx {
	return &coursePOHasManyOfferedCoursesTx{a.db.Model(m).Association(a.Name())}
}

type coursePOHasManyOfferedCoursesTx struct{ tx *gorm.Association }

func (a coursePOHasManyOfferedCoursesTx) Find() (result []*po.OfferedCoursePO, err error) {
	return result, a.tx.Find(&result)
}

func (a coursePOHasManyOfferedCoursesTx) Append(values ...*po.OfferedCoursePO) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a coursePOHasManyOfferedCoursesTx) Replace(values ...*po.OfferedCoursePO) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a coursePOHasManyOfferedCoursesTx) Delete(values ...*po.OfferedCoursePO) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a coursePOHasManyOfferedCoursesTx) Clear() error {
	return a.tx.Clear()
}

func (a coursePOHasManyOfferedCoursesTx) Count() int64 {
	return a.tx.Count()
}

type coursePOBelongsToMainTeacher struct {
	db *gorm.DB

	field.RelationField
}

func (a coursePOBelongsToMainTeacher) Where(conds ...field.Expr) *coursePOBelongsToMainTeacher {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a coursePOBelongsToMainTeacher) WithContext(ctx context.Context) *coursePOBelongsToMainTeacher {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a coursePOBelongsToMainTeacher) Session(session *gorm.Session) *coursePOBelongsToMainTeacher {
	a.db = a.db.Session(session)
	return &a
}

func (a coursePOBelongsToMainTeacher) Model(m *po.CoursePO) *coursePOBelongsToMainTeacherTx {
	return &coursePOBelongsToMainTeacherTx{a.db.Model(m).Association(a.Name())}
}

type coursePOBelongsToMainTeacherTx struct{ tx *gorm.Association }

func (a coursePOBelongsToMainTeacherTx) Find() (result *po.TeacherPO, err error) {
	return result, a.tx.Find(&result)
}

func (a coursePOBelongsToMainTeacherTx) Append(values ...*po.TeacherPO) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a coursePOBelongsToMainTeacherTx) Replace(values ...*po.TeacherPO) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a coursePOBelongsToMainTeacherTx) Delete(values ...*po.TeacherPO) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a coursePOBelongsToMainTeacherTx) Clear() error {
	return a.tx.Clear()
}

func (a coursePOBelongsToMainTeacherTx) Count() int64 {
	return a.tx.Count()
}

type coursePODo struct{ gen.DO }

type ICoursePODo interface {
	gen.SubQuery
	Debug() ICoursePODo
	WithContext(ctx context.Context) ICoursePODo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICoursePODo
	WriteDB() ICoursePODo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICoursePODo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICoursePODo
	Not(conds ...gen.Condition) ICoursePODo
	Or(conds ...gen.Condition) ICoursePODo
	Select(conds ...field.Expr) ICoursePODo
	Where(conds ...gen.Condition) ICoursePODo
	Order(conds ...field.Expr) ICoursePODo
	Distinct(cols ...field.Expr) ICoursePODo
	Omit(cols ...field.Expr) ICoursePODo
	Join(table schema.Tabler, on ...field.Expr) ICoursePODo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICoursePODo
	RightJoin(table schema.Tabler, on ...field.Expr) ICoursePODo
	Group(cols ...field.Expr) ICoursePODo
	Having(conds ...gen.Condition) ICoursePODo
	Limit(limit int) ICoursePODo
	Offset(offset int) ICoursePODo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICoursePODo
	Unscoped() ICoursePODo
	Create(values ...*po.CoursePO) error
	CreateInBatches(values []*po.CoursePO, batchSize int) error
	Save(values ...*po.CoursePO) error
	First() (*po.CoursePO, error)
	Take() (*po.CoursePO, error)
	Last() (*po.CoursePO, error)
	Find() ([]*po.CoursePO, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*po.CoursePO, err error)
	FindInBatches(result *[]*po.CoursePO, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*po.CoursePO) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICoursePODo
	Assign(attrs ...field.AssignExpr) ICoursePODo
	Joins(fields ...field.RelationField) ICoursePODo
	Preload(fields ...field.RelationField) ICoursePODo
	FirstOrInit() (*po.CoursePO, error)
	FirstOrCreate() (*po.CoursePO, error)
	FindByPage(offset int, limit int) (result []*po.CoursePO, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICoursePODo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c coursePODo) Debug() ICoursePODo {
	return c.withDO(c.DO.Debug())
}

func (c coursePODo) WithContext(ctx context.Context) ICoursePODo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c coursePODo) ReadDB() ICoursePODo {
	return c.Clauses(dbresolver.Read)
}

func (c coursePODo) WriteDB() ICoursePODo {
	return c.Clauses(dbresolver.Write)
}

func (c coursePODo) Session(config *gorm.Session) ICoursePODo {
	return c.withDO(c.DO.Session(config))
}

func (c coursePODo) Clauses(conds ...clause.Expression) ICoursePODo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c coursePODo) Returning(value interface{}, columns ...string) ICoursePODo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c coursePODo) Not(conds ...gen.Condition) ICoursePODo {
	return c.withDO(c.DO.Not(conds...))
}

func (c coursePODo) Or(conds ...gen.Condition) ICoursePODo {
	return c.withDO(c.DO.Or(conds...))
}

func (c coursePODo) Select(conds ...field.Expr) ICoursePODo {
	return c.withDO(c.DO.Select(conds...))
}

func (c coursePODo) Where(conds ...gen.Condition) ICoursePODo {
	return c.withDO(c.DO.Where(conds...))
}

func (c coursePODo) Order(conds ...field.Expr) ICoursePODo {
	return c.withDO(c.DO.Order(conds...))
}

func (c coursePODo) Distinct(cols ...field.Expr) ICoursePODo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c coursePODo) Omit(cols ...field.Expr) ICoursePODo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c coursePODo) Join(table schema.Tabler, on ...field.Expr) ICoursePODo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c coursePODo) LeftJoin(table schema.Tabler, on ...field.Expr) ICoursePODo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c coursePODo) RightJoin(table schema.Tabler, on ...field.Expr) ICoursePODo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c coursePODo) Group(cols ...field.Expr) ICoursePODo {
	return c.withDO(c.DO.Group(cols...))
}

func (c coursePODo) Having(conds ...gen.Condition) ICoursePODo {
	return c.withDO(c.DO.Having(conds...))
}

func (c coursePODo) Limit(limit int) ICoursePODo {
	return c.withDO(c.DO.Limit(limit))
}

func (c coursePODo) Offset(offset int) ICoursePODo {
	return c.withDO(c.DO.Offset(offset))
}

func (c coursePODo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICoursePODo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c coursePODo) Unscoped() ICoursePODo {
	return c.withDO(c.DO.Unscoped())
}

func (c coursePODo) Create(values ...*po.CoursePO) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c coursePODo) CreateInBatches(values []*po.CoursePO, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c coursePODo) Save(values ...*po.CoursePO) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c coursePODo) First() (*po.CoursePO, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*po.CoursePO), nil
	}
}

func (c coursePODo) Take() (*po.CoursePO, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*po.CoursePO), nil
	}
}

func (c coursePODo) Last() (*po.CoursePO, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*po.CoursePO), nil
	}
}

func (c coursePODo) Find() ([]*po.CoursePO, error) {
	result, err := c.DO.Find()
	return result.([]*po.CoursePO), err
}

func (c coursePODo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*po.CoursePO, err error) {
	buf := make([]*po.CoursePO, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c coursePODo) FindInBatches(result *[]*po.CoursePO, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c coursePODo) Attrs(attrs ...field.AssignExpr) ICoursePODo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c coursePODo) Assign(attrs ...field.AssignExpr) ICoursePODo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c coursePODo) Joins(fields ...field.RelationField) ICoursePODo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c coursePODo) Preload(fields ...field.RelationField) ICoursePODo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c coursePODo) FirstOrInit() (*po.CoursePO, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*po.CoursePO), nil
	}
}

func (c coursePODo) FirstOrCreate() (*po.CoursePO, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*po.CoursePO), nil
	}
}

func (c coursePODo) FindByPage(offset int, limit int) (result []*po.CoursePO, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c coursePODo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c coursePODo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c coursePODo) Delete(models ...*po.CoursePO) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *coursePODo) withDO(do gen.Dao) *coursePODo {
	c.DO = *do.(*gen.DO)
	return c
}
