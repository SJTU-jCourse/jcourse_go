// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"jcourse_go/model/po"
)

func newTrainingPlanCoursePO(db *gorm.DB, opts ...gen.DOOption) trainingPlanCoursePO {
	_trainingPlanCoursePO := trainingPlanCoursePO{}

	_trainingPlanCoursePO.trainingPlanCoursePODo.UseDB(db, opts...)
	_trainingPlanCoursePO.trainingPlanCoursePODo.UseModel(&po.TrainingPlanCoursePO{})

	tableName := _trainingPlanCoursePO.trainingPlanCoursePODo.TableName()
	_trainingPlanCoursePO.ALL = field.NewAsterisk(tableName)
	_trainingPlanCoursePO.ID = field.NewInt64(tableName, "id")
	_trainingPlanCoursePO.CreatedAt = field.NewTime(tableName, "created_at")
	_trainingPlanCoursePO.BaseCourseID = field.NewInt64(tableName, "base_course_id")
	_trainingPlanCoursePO.TrainingPlanID = field.NewInt64(tableName, "training_plan_id")
	_trainingPlanCoursePO.SuggestSemester = field.NewString(tableName, "suggest_semester")
	_trainingPlanCoursePO.Category = field.NewString(tableName, "category")
	_trainingPlanCoursePO.BaseCourse = trainingPlanCoursePOBelongsToBaseCourse{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("BaseCourse", "po.BaseCoursePO"),
	}

	_trainingPlanCoursePO.TrainingPlan = trainingPlanCoursePOBelongsToTrainingPlan{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("TrainingPlan", "po.TrainingPlanPO"),
		BaseCourses: struct {
			field.RelationField
			BaseCourse struct {
				field.RelationField
			}
			TrainingPlan struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("TrainingPlan.BaseCourses", "po.TrainingPlanCoursePO"),
			BaseCourse: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("TrainingPlan.BaseCourses.BaseCourse", "po.BaseCoursePO"),
			},
			TrainingPlan: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("TrainingPlan.BaseCourses.TrainingPlan", "po.TrainingPlanPO"),
			},
		},
	}

	_trainingPlanCoursePO.fillFieldMap()

	return _trainingPlanCoursePO
}

type trainingPlanCoursePO struct {
	trainingPlanCoursePODo

	ALL             field.Asterisk
	ID              field.Int64
	CreatedAt       field.Time
	BaseCourseID    field.Int64
	TrainingPlanID  field.Int64
	SuggestSemester field.String
	Category        field.String
	BaseCourse      trainingPlanCoursePOBelongsToBaseCourse

	TrainingPlan trainingPlanCoursePOBelongsToTrainingPlan

	fieldMap map[string]field.Expr
}

func (t trainingPlanCoursePO) Table(newTableName string) *trainingPlanCoursePO {
	t.trainingPlanCoursePODo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t trainingPlanCoursePO) As(alias string) *trainingPlanCoursePO {
	t.trainingPlanCoursePODo.DO = *(t.trainingPlanCoursePODo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *trainingPlanCoursePO) updateTableName(table string) *trainingPlanCoursePO {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt64(table, "id")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.BaseCourseID = field.NewInt64(table, "base_course_id")
	t.TrainingPlanID = field.NewInt64(table, "training_plan_id")
	t.SuggestSemester = field.NewString(table, "suggest_semester")
	t.Category = field.NewString(table, "category")

	t.fillFieldMap()

	return t
}

func (t *trainingPlanCoursePO) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *trainingPlanCoursePO) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 8)
	t.fieldMap["id"] = t.ID
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["base_course_id"] = t.BaseCourseID
	t.fieldMap["training_plan_id"] = t.TrainingPlanID
	t.fieldMap["suggest_semester"] = t.SuggestSemester
	t.fieldMap["category"] = t.Category

}

func (t trainingPlanCoursePO) clone(db *gorm.DB) trainingPlanCoursePO {
	t.trainingPlanCoursePODo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t trainingPlanCoursePO) replaceDB(db *gorm.DB) trainingPlanCoursePO {
	t.trainingPlanCoursePODo.ReplaceDB(db)
	return t
}

type trainingPlanCoursePOBelongsToBaseCourse struct {
	db *gorm.DB

	field.RelationField
}

func (a trainingPlanCoursePOBelongsToBaseCourse) Where(conds ...field.Expr) *trainingPlanCoursePOBelongsToBaseCourse {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a trainingPlanCoursePOBelongsToBaseCourse) WithContext(ctx context.Context) *trainingPlanCoursePOBelongsToBaseCourse {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a trainingPlanCoursePOBelongsToBaseCourse) Session(session *gorm.Session) *trainingPlanCoursePOBelongsToBaseCourse {
	a.db = a.db.Session(session)
	return &a
}

func (a trainingPlanCoursePOBelongsToBaseCourse) Model(m *po.TrainingPlanCoursePO) *trainingPlanCoursePOBelongsToBaseCourseTx {
	return &trainingPlanCoursePOBelongsToBaseCourseTx{a.db.Model(m).Association(a.Name())}
}

type trainingPlanCoursePOBelongsToBaseCourseTx struct{ tx *gorm.Association }

func (a trainingPlanCoursePOBelongsToBaseCourseTx) Find() (result *po.BaseCoursePO, err error) {
	return result, a.tx.Find(&result)
}

func (a trainingPlanCoursePOBelongsToBaseCourseTx) Append(values ...*po.BaseCoursePO) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a trainingPlanCoursePOBelongsToBaseCourseTx) Replace(values ...*po.BaseCoursePO) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a trainingPlanCoursePOBelongsToBaseCourseTx) Delete(values ...*po.BaseCoursePO) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a trainingPlanCoursePOBelongsToBaseCourseTx) Clear() error {
	return a.tx.Clear()
}

func (a trainingPlanCoursePOBelongsToBaseCourseTx) Count() int64 {
	return a.tx.Count()
}

type trainingPlanCoursePOBelongsToTrainingPlan struct {
	db *gorm.DB

	field.RelationField

	BaseCourses struct {
		field.RelationField
		BaseCourse struct {
			field.RelationField
		}
		TrainingPlan struct {
			field.RelationField
		}
	}
}

func (a trainingPlanCoursePOBelongsToTrainingPlan) Where(conds ...field.Expr) *trainingPlanCoursePOBelongsToTrainingPlan {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a trainingPlanCoursePOBelongsToTrainingPlan) WithContext(ctx context.Context) *trainingPlanCoursePOBelongsToTrainingPlan {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a trainingPlanCoursePOBelongsToTrainingPlan) Session(session *gorm.Session) *trainingPlanCoursePOBelongsToTrainingPlan {
	a.db = a.db.Session(session)
	return &a
}

func (a trainingPlanCoursePOBelongsToTrainingPlan) Model(m *po.TrainingPlanCoursePO) *trainingPlanCoursePOBelongsToTrainingPlanTx {
	return &trainingPlanCoursePOBelongsToTrainingPlanTx{a.db.Model(m).Association(a.Name())}
}

type trainingPlanCoursePOBelongsToTrainingPlanTx struct{ tx *gorm.Association }

func (a trainingPlanCoursePOBelongsToTrainingPlanTx) Find() (result *po.TrainingPlanPO, err error) {
	return result, a.tx.Find(&result)
}

func (a trainingPlanCoursePOBelongsToTrainingPlanTx) Append(values ...*po.TrainingPlanPO) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a trainingPlanCoursePOBelongsToTrainingPlanTx) Replace(values ...*po.TrainingPlanPO) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a trainingPlanCoursePOBelongsToTrainingPlanTx) Delete(values ...*po.TrainingPlanPO) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a trainingPlanCoursePOBelongsToTrainingPlanTx) Clear() error {
	return a.tx.Clear()
}

func (a trainingPlanCoursePOBelongsToTrainingPlanTx) Count() int64 {
	return a.tx.Count()
}

type trainingPlanCoursePODo struct{ gen.DO }

type ITrainingPlanCoursePODo interface {
	gen.SubQuery
	Debug() ITrainingPlanCoursePODo
	WithContext(ctx context.Context) ITrainingPlanCoursePODo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITrainingPlanCoursePODo
	WriteDB() ITrainingPlanCoursePODo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITrainingPlanCoursePODo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITrainingPlanCoursePODo
	Not(conds ...gen.Condition) ITrainingPlanCoursePODo
	Or(conds ...gen.Condition) ITrainingPlanCoursePODo
	Select(conds ...field.Expr) ITrainingPlanCoursePODo
	Where(conds ...gen.Condition) ITrainingPlanCoursePODo
	Order(conds ...field.Expr) ITrainingPlanCoursePODo
	Distinct(cols ...field.Expr) ITrainingPlanCoursePODo
	Omit(cols ...field.Expr) ITrainingPlanCoursePODo
	Join(table schema.Tabler, on ...field.Expr) ITrainingPlanCoursePODo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITrainingPlanCoursePODo
	RightJoin(table schema.Tabler, on ...field.Expr) ITrainingPlanCoursePODo
	Group(cols ...field.Expr) ITrainingPlanCoursePODo
	Having(conds ...gen.Condition) ITrainingPlanCoursePODo
	Limit(limit int) ITrainingPlanCoursePODo
	Offset(offset int) ITrainingPlanCoursePODo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITrainingPlanCoursePODo
	Unscoped() ITrainingPlanCoursePODo
	Create(values ...*po.TrainingPlanCoursePO) error
	CreateInBatches(values []*po.TrainingPlanCoursePO, batchSize int) error
	Save(values ...*po.TrainingPlanCoursePO) error
	First() (*po.TrainingPlanCoursePO, error)
	Take() (*po.TrainingPlanCoursePO, error)
	Last() (*po.TrainingPlanCoursePO, error)
	Find() ([]*po.TrainingPlanCoursePO, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*po.TrainingPlanCoursePO, err error)
	FindInBatches(result *[]*po.TrainingPlanCoursePO, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*po.TrainingPlanCoursePO) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITrainingPlanCoursePODo
	Assign(attrs ...field.AssignExpr) ITrainingPlanCoursePODo
	Joins(fields ...field.RelationField) ITrainingPlanCoursePODo
	Preload(fields ...field.RelationField) ITrainingPlanCoursePODo
	FirstOrInit() (*po.TrainingPlanCoursePO, error)
	FirstOrCreate() (*po.TrainingPlanCoursePO, error)
	FindByPage(offset int, limit int) (result []*po.TrainingPlanCoursePO, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITrainingPlanCoursePODo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t trainingPlanCoursePODo) Debug() ITrainingPlanCoursePODo {
	return t.withDO(t.DO.Debug())
}

func (t trainingPlanCoursePODo) WithContext(ctx context.Context) ITrainingPlanCoursePODo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t trainingPlanCoursePODo) ReadDB() ITrainingPlanCoursePODo {
	return t.Clauses(dbresolver.Read)
}

func (t trainingPlanCoursePODo) WriteDB() ITrainingPlanCoursePODo {
	return t.Clauses(dbresolver.Write)
}

func (t trainingPlanCoursePODo) Session(config *gorm.Session) ITrainingPlanCoursePODo {
	return t.withDO(t.DO.Session(config))
}

func (t trainingPlanCoursePODo) Clauses(conds ...clause.Expression) ITrainingPlanCoursePODo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t trainingPlanCoursePODo) Returning(value interface{}, columns ...string) ITrainingPlanCoursePODo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t trainingPlanCoursePODo) Not(conds ...gen.Condition) ITrainingPlanCoursePODo {
	return t.withDO(t.DO.Not(conds...))
}

func (t trainingPlanCoursePODo) Or(conds ...gen.Condition) ITrainingPlanCoursePODo {
	return t.withDO(t.DO.Or(conds...))
}

func (t trainingPlanCoursePODo) Select(conds ...field.Expr) ITrainingPlanCoursePODo {
	return t.withDO(t.DO.Select(conds...))
}

func (t trainingPlanCoursePODo) Where(conds ...gen.Condition) ITrainingPlanCoursePODo {
	return t.withDO(t.DO.Where(conds...))
}

func (t trainingPlanCoursePODo) Order(conds ...field.Expr) ITrainingPlanCoursePODo {
	return t.withDO(t.DO.Order(conds...))
}

func (t trainingPlanCoursePODo) Distinct(cols ...field.Expr) ITrainingPlanCoursePODo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t trainingPlanCoursePODo) Omit(cols ...field.Expr) ITrainingPlanCoursePODo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t trainingPlanCoursePODo) Join(table schema.Tabler, on ...field.Expr) ITrainingPlanCoursePODo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t trainingPlanCoursePODo) LeftJoin(table schema.Tabler, on ...field.Expr) ITrainingPlanCoursePODo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t trainingPlanCoursePODo) RightJoin(table schema.Tabler, on ...field.Expr) ITrainingPlanCoursePODo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t trainingPlanCoursePODo) Group(cols ...field.Expr) ITrainingPlanCoursePODo {
	return t.withDO(t.DO.Group(cols...))
}

func (t trainingPlanCoursePODo) Having(conds ...gen.Condition) ITrainingPlanCoursePODo {
	return t.withDO(t.DO.Having(conds...))
}

func (t trainingPlanCoursePODo) Limit(limit int) ITrainingPlanCoursePODo {
	return t.withDO(t.DO.Limit(limit))
}

func (t trainingPlanCoursePODo) Offset(offset int) ITrainingPlanCoursePODo {
	return t.withDO(t.DO.Offset(offset))
}

func (t trainingPlanCoursePODo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITrainingPlanCoursePODo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t trainingPlanCoursePODo) Unscoped() ITrainingPlanCoursePODo {
	return t.withDO(t.DO.Unscoped())
}

func (t trainingPlanCoursePODo) Create(values ...*po.TrainingPlanCoursePO) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t trainingPlanCoursePODo) CreateInBatches(values []*po.TrainingPlanCoursePO, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t trainingPlanCoursePODo) Save(values ...*po.TrainingPlanCoursePO) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t trainingPlanCoursePODo) First() (*po.TrainingPlanCoursePO, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*po.TrainingPlanCoursePO), nil
	}
}

func (t trainingPlanCoursePODo) Take() (*po.TrainingPlanCoursePO, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*po.TrainingPlanCoursePO), nil
	}
}

func (t trainingPlanCoursePODo) Last() (*po.TrainingPlanCoursePO, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*po.TrainingPlanCoursePO), nil
	}
}

func (t trainingPlanCoursePODo) Find() ([]*po.TrainingPlanCoursePO, error) {
	result, err := t.DO.Find()
	return result.([]*po.TrainingPlanCoursePO), err
}

func (t trainingPlanCoursePODo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*po.TrainingPlanCoursePO, err error) {
	buf := make([]*po.TrainingPlanCoursePO, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t trainingPlanCoursePODo) FindInBatches(result *[]*po.TrainingPlanCoursePO, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t trainingPlanCoursePODo) Attrs(attrs ...field.AssignExpr) ITrainingPlanCoursePODo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t trainingPlanCoursePODo) Assign(attrs ...field.AssignExpr) ITrainingPlanCoursePODo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t trainingPlanCoursePODo) Joins(fields ...field.RelationField) ITrainingPlanCoursePODo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t trainingPlanCoursePODo) Preload(fields ...field.RelationField) ITrainingPlanCoursePODo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t trainingPlanCoursePODo) FirstOrInit() (*po.TrainingPlanCoursePO, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*po.TrainingPlanCoursePO), nil
	}
}

func (t trainingPlanCoursePODo) FirstOrCreate() (*po.TrainingPlanCoursePO, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*po.TrainingPlanCoursePO), nil
	}
}

func (t trainingPlanCoursePODo) FindByPage(offset int, limit int) (result []*po.TrainingPlanCoursePO, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t trainingPlanCoursePODo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t trainingPlanCoursePODo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t trainingPlanCoursePODo) Delete(models ...*po.TrainingPlanCoursePO) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *trainingPlanCoursePODo) withDO(do gen.Dao) *trainingPlanCoursePODo {
	t.DO = *do.(*gen.DO)
	return t
}
