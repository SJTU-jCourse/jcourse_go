// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"jcourse_go/model/po"
)

func newReviewReactionPO(db *gorm.DB, opts ...gen.DOOption) reviewReactionPO {
	_reviewReactionPO := reviewReactionPO{}

	_reviewReactionPO.reviewReactionPODo.UseDB(db, opts...)
	_reviewReactionPO.reviewReactionPODo.UseModel(&po.ReviewReactionPO{})

	tableName := _reviewReactionPO.reviewReactionPODo.TableName()
	_reviewReactionPO.ALL = field.NewAsterisk(tableName)
	_reviewReactionPO.ID = field.NewInt64(tableName, "id")
	_reviewReactionPO.CreatedAt = field.NewTime(tableName, "created_at")
	_reviewReactionPO.ReviewID = field.NewInt64(tableName, "review_id")
	_reviewReactionPO.UserID = field.NewInt64(tableName, "user_id")
	_reviewReactionPO.Reaction = field.NewString(tableName, "reaction")
	_reviewReactionPO.Review = reviewReactionPOBelongsToReview{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Review", "po.ReviewPO"),
		Course: struct {
			field.RelationField
			MainTeacher struct {
				field.RelationField
				Courses struct {
					field.RelationField
				}
			}
			Categories struct {
				field.RelationField
				Course struct {
					field.RelationField
				}
			}
			OfferedCourses struct {
				field.RelationField
				Course struct {
					field.RelationField
				}
				MainTeacher struct {
					field.RelationField
				}
				OfferedCourseTeacher struct {
					field.RelationField
					Course struct {
						field.RelationField
					}
					OfferedCourse struct {
						field.RelationField
					}
					MainTeacher struct {
						field.RelationField
					}
					Teacher struct {
						field.RelationField
					}
				}
			}
		}{
			RelationField: field.NewRelation("Review.Course", "po.CoursePO"),
			MainTeacher: struct {
				field.RelationField
				Courses struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Review.Course.MainTeacher", "po.TeacherPO"),
				Courses: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Review.Course.MainTeacher.Courses", "po.CoursePO"),
				},
			},
			Categories: struct {
				field.RelationField
				Course struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Review.Course.Categories", "po.CourseCategoryPO"),
				Course: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Review.Course.Categories.Course", "po.CoursePO"),
				},
			},
			OfferedCourses: struct {
				field.RelationField
				Course struct {
					field.RelationField
				}
				MainTeacher struct {
					field.RelationField
				}
				OfferedCourseTeacher struct {
					field.RelationField
					Course struct {
						field.RelationField
					}
					OfferedCourse struct {
						field.RelationField
					}
					MainTeacher struct {
						field.RelationField
					}
					Teacher struct {
						field.RelationField
					}
				}
			}{
				RelationField: field.NewRelation("Review.Course.OfferedCourses", "po.OfferedCoursePO"),
				Course: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Review.Course.OfferedCourses.Course", "po.CoursePO"),
				},
				MainTeacher: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Review.Course.OfferedCourses.MainTeacher", "po.TeacherPO"),
				},
				OfferedCourseTeacher: struct {
					field.RelationField
					Course struct {
						field.RelationField
					}
					OfferedCourse struct {
						field.RelationField
					}
					MainTeacher struct {
						field.RelationField
					}
					Teacher struct {
						field.RelationField
					}
				}{
					RelationField: field.NewRelation("Review.Course.OfferedCourses.OfferedCourseTeacher", "po.OfferedCourseTeacherPO"),
					Course: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("Review.Course.OfferedCourses.OfferedCourseTeacher.Course", "po.CoursePO"),
					},
					OfferedCourse: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("Review.Course.OfferedCourses.OfferedCourseTeacher.OfferedCourse", "po.OfferedCoursePO"),
					},
					MainTeacher: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("Review.Course.OfferedCourses.OfferedCourseTeacher.MainTeacher", "po.TeacherPO"),
					},
					Teacher: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("Review.Course.OfferedCourses.OfferedCourseTeacher.Teacher", "po.TeacherPO"),
					},
				},
			},
		},
		User: struct {
			field.RelationField
			UserPointDetails struct {
				field.RelationField
				User struct {
					field.RelationField
				}
			}
		}{
			RelationField: field.NewRelation("Review.User", "po.UserPO"),
			UserPointDetails: struct {
				field.RelationField
				User struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Review.User.UserPointDetails", "po.UserPointDetailPO"),
				User: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Review.User.UserPointDetails.User", "po.UserPO"),
				},
			},
		},
		Revisions: struct {
			field.RelationField
			Review struct {
				field.RelationField
			}
			User struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Review.Revisions", "po.ReviewRevisionPO"),
			Review: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Review.Revisions.Review", "po.ReviewPO"),
			},
			User: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Review.Revisions.User", "po.UserPO"),
			},
		},
		Reaction: struct {
			field.RelationField
			Review struct {
				field.RelationField
			}
			User struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Review.Reaction", "po.ReviewReactionPO"),
			Review: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Review.Reaction.Review", "po.ReviewPO"),
			},
			User: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Review.Reaction.User", "po.UserPO"),
			},
		},
	}

	_reviewReactionPO.User = reviewReactionPOBelongsToUser{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("User", "po.UserPO"),
	}

	_reviewReactionPO.fillFieldMap()

	return _reviewReactionPO
}

type reviewReactionPO struct {
	reviewReactionPODo

	ALL       field.Asterisk
	ID        field.Int64
	CreatedAt field.Time
	ReviewID  field.Int64
	UserID    field.Int64
	Reaction  field.String
	Review    reviewReactionPOBelongsToReview

	User reviewReactionPOBelongsToUser

	fieldMap map[string]field.Expr
}

func (r reviewReactionPO) Table(newTableName string) *reviewReactionPO {
	r.reviewReactionPODo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r reviewReactionPO) As(alias string) *reviewReactionPO {
	r.reviewReactionPODo.DO = *(r.reviewReactionPODo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *reviewReactionPO) updateTableName(table string) *reviewReactionPO {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewInt64(table, "id")
	r.CreatedAt = field.NewTime(table, "created_at")
	r.ReviewID = field.NewInt64(table, "review_id")
	r.UserID = field.NewInt64(table, "user_id")
	r.Reaction = field.NewString(table, "reaction")

	r.fillFieldMap()

	return r
}

func (r *reviewReactionPO) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *reviewReactionPO) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 7)
	r.fieldMap["id"] = r.ID
	r.fieldMap["created_at"] = r.CreatedAt
	r.fieldMap["review_id"] = r.ReviewID
	r.fieldMap["user_id"] = r.UserID
	r.fieldMap["reaction"] = r.Reaction

}

func (r reviewReactionPO) clone(db *gorm.DB) reviewReactionPO {
	r.reviewReactionPODo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r reviewReactionPO) replaceDB(db *gorm.DB) reviewReactionPO {
	r.reviewReactionPODo.ReplaceDB(db)
	return r
}

type reviewReactionPOBelongsToReview struct {
	db *gorm.DB

	field.RelationField

	Course struct {
		field.RelationField
		MainTeacher struct {
			field.RelationField
			Courses struct {
				field.RelationField
			}
		}
		Categories struct {
			field.RelationField
			Course struct {
				field.RelationField
			}
		}
		OfferedCourses struct {
			field.RelationField
			Course struct {
				field.RelationField
			}
			MainTeacher struct {
				field.RelationField
			}
			OfferedCourseTeacher struct {
				field.RelationField
				Course struct {
					field.RelationField
				}
				OfferedCourse struct {
					field.RelationField
				}
				MainTeacher struct {
					field.RelationField
				}
				Teacher struct {
					field.RelationField
				}
			}
		}
	}
	User struct {
		field.RelationField
		UserPointDetails struct {
			field.RelationField
			User struct {
				field.RelationField
			}
		}
	}
	Revisions struct {
		field.RelationField
		Review struct {
			field.RelationField
		}
		User struct {
			field.RelationField
		}
	}
	Reaction struct {
		field.RelationField
		Review struct {
			field.RelationField
		}
		User struct {
			field.RelationField
		}
	}
}

func (a reviewReactionPOBelongsToReview) Where(conds ...field.Expr) *reviewReactionPOBelongsToReview {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a reviewReactionPOBelongsToReview) WithContext(ctx context.Context) *reviewReactionPOBelongsToReview {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a reviewReactionPOBelongsToReview) Session(session *gorm.Session) *reviewReactionPOBelongsToReview {
	a.db = a.db.Session(session)
	return &a
}

func (a reviewReactionPOBelongsToReview) Model(m *po.ReviewReactionPO) *reviewReactionPOBelongsToReviewTx {
	return &reviewReactionPOBelongsToReviewTx{a.db.Model(m).Association(a.Name())}
}

type reviewReactionPOBelongsToReviewTx struct{ tx *gorm.Association }

func (a reviewReactionPOBelongsToReviewTx) Find() (result *po.ReviewPO, err error) {
	return result, a.tx.Find(&result)
}

func (a reviewReactionPOBelongsToReviewTx) Append(values ...*po.ReviewPO) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a reviewReactionPOBelongsToReviewTx) Replace(values ...*po.ReviewPO) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a reviewReactionPOBelongsToReviewTx) Delete(values ...*po.ReviewPO) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a reviewReactionPOBelongsToReviewTx) Clear() error {
	return a.tx.Clear()
}

func (a reviewReactionPOBelongsToReviewTx) Count() int64 {
	return a.tx.Count()
}

type reviewReactionPOBelongsToUser struct {
	db *gorm.DB

	field.RelationField
}

func (a reviewReactionPOBelongsToUser) Where(conds ...field.Expr) *reviewReactionPOBelongsToUser {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a reviewReactionPOBelongsToUser) WithContext(ctx context.Context) *reviewReactionPOBelongsToUser {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a reviewReactionPOBelongsToUser) Session(session *gorm.Session) *reviewReactionPOBelongsToUser {
	a.db = a.db.Session(session)
	return &a
}

func (a reviewReactionPOBelongsToUser) Model(m *po.ReviewReactionPO) *reviewReactionPOBelongsToUserTx {
	return &reviewReactionPOBelongsToUserTx{a.db.Model(m).Association(a.Name())}
}

type reviewReactionPOBelongsToUserTx struct{ tx *gorm.Association }

func (a reviewReactionPOBelongsToUserTx) Find() (result *po.UserPO, err error) {
	return result, a.tx.Find(&result)
}

func (a reviewReactionPOBelongsToUserTx) Append(values ...*po.UserPO) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a reviewReactionPOBelongsToUserTx) Replace(values ...*po.UserPO) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a reviewReactionPOBelongsToUserTx) Delete(values ...*po.UserPO) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a reviewReactionPOBelongsToUserTx) Clear() error {
	return a.tx.Clear()
}

func (a reviewReactionPOBelongsToUserTx) Count() int64 {
	return a.tx.Count()
}

type reviewReactionPODo struct{ gen.DO }

type IReviewReactionPODo interface {
	gen.SubQuery
	Debug() IReviewReactionPODo
	WithContext(ctx context.Context) IReviewReactionPODo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IReviewReactionPODo
	WriteDB() IReviewReactionPODo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IReviewReactionPODo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IReviewReactionPODo
	Not(conds ...gen.Condition) IReviewReactionPODo
	Or(conds ...gen.Condition) IReviewReactionPODo
	Select(conds ...field.Expr) IReviewReactionPODo
	Where(conds ...gen.Condition) IReviewReactionPODo
	Order(conds ...field.Expr) IReviewReactionPODo
	Distinct(cols ...field.Expr) IReviewReactionPODo
	Omit(cols ...field.Expr) IReviewReactionPODo
	Join(table schema.Tabler, on ...field.Expr) IReviewReactionPODo
	LeftJoin(table schema.Tabler, on ...field.Expr) IReviewReactionPODo
	RightJoin(table schema.Tabler, on ...field.Expr) IReviewReactionPODo
	Group(cols ...field.Expr) IReviewReactionPODo
	Having(conds ...gen.Condition) IReviewReactionPODo
	Limit(limit int) IReviewReactionPODo
	Offset(offset int) IReviewReactionPODo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IReviewReactionPODo
	Unscoped() IReviewReactionPODo
	Create(values ...*po.ReviewReactionPO) error
	CreateInBatches(values []*po.ReviewReactionPO, batchSize int) error
	Save(values ...*po.ReviewReactionPO) error
	First() (*po.ReviewReactionPO, error)
	Take() (*po.ReviewReactionPO, error)
	Last() (*po.ReviewReactionPO, error)
	Find() ([]*po.ReviewReactionPO, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*po.ReviewReactionPO, err error)
	FindInBatches(result *[]*po.ReviewReactionPO, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*po.ReviewReactionPO) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IReviewReactionPODo
	Assign(attrs ...field.AssignExpr) IReviewReactionPODo
	Joins(fields ...field.RelationField) IReviewReactionPODo
	Preload(fields ...field.RelationField) IReviewReactionPODo
	FirstOrInit() (*po.ReviewReactionPO, error)
	FirstOrCreate() (*po.ReviewReactionPO, error)
	FindByPage(offset int, limit int) (result []*po.ReviewReactionPO, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IReviewReactionPODo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r reviewReactionPODo) Debug() IReviewReactionPODo {
	return r.withDO(r.DO.Debug())
}

func (r reviewReactionPODo) WithContext(ctx context.Context) IReviewReactionPODo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r reviewReactionPODo) ReadDB() IReviewReactionPODo {
	return r.Clauses(dbresolver.Read)
}

func (r reviewReactionPODo) WriteDB() IReviewReactionPODo {
	return r.Clauses(dbresolver.Write)
}

func (r reviewReactionPODo) Session(config *gorm.Session) IReviewReactionPODo {
	return r.withDO(r.DO.Session(config))
}

func (r reviewReactionPODo) Clauses(conds ...clause.Expression) IReviewReactionPODo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r reviewReactionPODo) Returning(value interface{}, columns ...string) IReviewReactionPODo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r reviewReactionPODo) Not(conds ...gen.Condition) IReviewReactionPODo {
	return r.withDO(r.DO.Not(conds...))
}

func (r reviewReactionPODo) Or(conds ...gen.Condition) IReviewReactionPODo {
	return r.withDO(r.DO.Or(conds...))
}

func (r reviewReactionPODo) Select(conds ...field.Expr) IReviewReactionPODo {
	return r.withDO(r.DO.Select(conds...))
}

func (r reviewReactionPODo) Where(conds ...gen.Condition) IReviewReactionPODo {
	return r.withDO(r.DO.Where(conds...))
}

func (r reviewReactionPODo) Order(conds ...field.Expr) IReviewReactionPODo {
	return r.withDO(r.DO.Order(conds...))
}

func (r reviewReactionPODo) Distinct(cols ...field.Expr) IReviewReactionPODo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r reviewReactionPODo) Omit(cols ...field.Expr) IReviewReactionPODo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r reviewReactionPODo) Join(table schema.Tabler, on ...field.Expr) IReviewReactionPODo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r reviewReactionPODo) LeftJoin(table schema.Tabler, on ...field.Expr) IReviewReactionPODo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r reviewReactionPODo) RightJoin(table schema.Tabler, on ...field.Expr) IReviewReactionPODo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r reviewReactionPODo) Group(cols ...field.Expr) IReviewReactionPODo {
	return r.withDO(r.DO.Group(cols...))
}

func (r reviewReactionPODo) Having(conds ...gen.Condition) IReviewReactionPODo {
	return r.withDO(r.DO.Having(conds...))
}

func (r reviewReactionPODo) Limit(limit int) IReviewReactionPODo {
	return r.withDO(r.DO.Limit(limit))
}

func (r reviewReactionPODo) Offset(offset int) IReviewReactionPODo {
	return r.withDO(r.DO.Offset(offset))
}

func (r reviewReactionPODo) Scopes(funcs ...func(gen.Dao) gen.Dao) IReviewReactionPODo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r reviewReactionPODo) Unscoped() IReviewReactionPODo {
	return r.withDO(r.DO.Unscoped())
}

func (r reviewReactionPODo) Create(values ...*po.ReviewReactionPO) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r reviewReactionPODo) CreateInBatches(values []*po.ReviewReactionPO, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r reviewReactionPODo) Save(values ...*po.ReviewReactionPO) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r reviewReactionPODo) First() (*po.ReviewReactionPO, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*po.ReviewReactionPO), nil
	}
}

func (r reviewReactionPODo) Take() (*po.ReviewReactionPO, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*po.ReviewReactionPO), nil
	}
}

func (r reviewReactionPODo) Last() (*po.ReviewReactionPO, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*po.ReviewReactionPO), nil
	}
}

func (r reviewReactionPODo) Find() ([]*po.ReviewReactionPO, error) {
	result, err := r.DO.Find()
	return result.([]*po.ReviewReactionPO), err
}

func (r reviewReactionPODo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*po.ReviewReactionPO, err error) {
	buf := make([]*po.ReviewReactionPO, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r reviewReactionPODo) FindInBatches(result *[]*po.ReviewReactionPO, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r reviewReactionPODo) Attrs(attrs ...field.AssignExpr) IReviewReactionPODo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r reviewReactionPODo) Assign(attrs ...field.AssignExpr) IReviewReactionPODo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r reviewReactionPODo) Joins(fields ...field.RelationField) IReviewReactionPODo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r reviewReactionPODo) Preload(fields ...field.RelationField) IReviewReactionPODo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r reviewReactionPODo) FirstOrInit() (*po.ReviewReactionPO, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*po.ReviewReactionPO), nil
	}
}

func (r reviewReactionPODo) FirstOrCreate() (*po.ReviewReactionPO, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*po.ReviewReactionPO), nil
	}
}

func (r reviewReactionPODo) FindByPage(offset int, limit int) (result []*po.ReviewReactionPO, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r reviewReactionPODo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r reviewReactionPODo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r reviewReactionPODo) Delete(models ...*po.ReviewReactionPO) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *reviewReactionPODo) withDO(do gen.Dao) *reviewReactionPODo {
	r.DO = *do.(*gen.DO)
	return r
}
