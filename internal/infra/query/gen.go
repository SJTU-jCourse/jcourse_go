// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                    = new(Query)
	BaseCoursePO         *baseCoursePO
	CourseCategoryPO     *courseCategoryPO
	CoursePO             *coursePO
	OfferedCoursePO      *offeredCoursePO
	RatingPO             *ratingPO
	ReviewPO             *reviewPO
	ReviewReactionPO     *reviewReactionPO
	ReviewRevisionPO     *reviewRevisionPO
	SettingPO            *settingPO
	StatisticDataPO      *statisticDataPO
	StatisticPO          *statisticPO
	TeacherPO            *teacherPO
	TrainingPlanCoursePO *trainingPlanCoursePO
	TrainingPlanPO       *trainingPlanPO
	UserPO               *userPO
	UserPointDetailPO    *userPointDetailPO
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	BaseCoursePO = &Q.BaseCoursePO
	CourseCategoryPO = &Q.CourseCategoryPO
	CoursePO = &Q.CoursePO
	OfferedCoursePO = &Q.OfferedCoursePO
	RatingPO = &Q.RatingPO
	ReviewPO = &Q.ReviewPO
	ReviewReactionPO = &Q.ReviewReactionPO
	ReviewRevisionPO = &Q.ReviewRevisionPO
	SettingPO = &Q.SettingPO
	StatisticDataPO = &Q.StatisticDataPO
	StatisticPO = &Q.StatisticPO
	TeacherPO = &Q.TeacherPO
	TrainingPlanCoursePO = &Q.TrainingPlanCoursePO
	TrainingPlanPO = &Q.TrainingPlanPO
	UserPO = &Q.UserPO
	UserPointDetailPO = &Q.UserPointDetailPO
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                   db,
		BaseCoursePO:         newBaseCoursePO(db, opts...),
		CourseCategoryPO:     newCourseCategoryPO(db, opts...),
		CoursePO:             newCoursePO(db, opts...),
		OfferedCoursePO:      newOfferedCoursePO(db, opts...),
		RatingPO:             newRatingPO(db, opts...),
		ReviewPO:             newReviewPO(db, opts...),
		ReviewReactionPO:     newReviewReactionPO(db, opts...),
		ReviewRevisionPO:     newReviewRevisionPO(db, opts...),
		SettingPO:            newSettingPO(db, opts...),
		StatisticDataPO:      newStatisticDataPO(db, opts...),
		StatisticPO:          newStatisticPO(db, opts...),
		TeacherPO:            newTeacherPO(db, opts...),
		TrainingPlanCoursePO: newTrainingPlanCoursePO(db, opts...),
		TrainingPlanPO:       newTrainingPlanPO(db, opts...),
		UserPO:               newUserPO(db, opts...),
		UserPointDetailPO:    newUserPointDetailPO(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	BaseCoursePO         baseCoursePO
	CourseCategoryPO     courseCategoryPO
	CoursePO             coursePO
	OfferedCoursePO      offeredCoursePO
	RatingPO             ratingPO
	ReviewPO             reviewPO
	ReviewReactionPO     reviewReactionPO
	ReviewRevisionPO     reviewRevisionPO
	SettingPO            settingPO
	StatisticDataPO      statisticDataPO
	StatisticPO          statisticPO
	TeacherPO            teacherPO
	TrainingPlanCoursePO trainingPlanCoursePO
	TrainingPlanPO       trainingPlanPO
	UserPO               userPO
	UserPointDetailPO    userPointDetailPO
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                   db,
		BaseCoursePO:         q.BaseCoursePO.clone(db),
		CourseCategoryPO:     q.CourseCategoryPO.clone(db),
		CoursePO:             q.CoursePO.clone(db),
		OfferedCoursePO:      q.OfferedCoursePO.clone(db),
		RatingPO:             q.RatingPO.clone(db),
		ReviewPO:             q.ReviewPO.clone(db),
		ReviewReactionPO:     q.ReviewReactionPO.clone(db),
		ReviewRevisionPO:     q.ReviewRevisionPO.clone(db),
		SettingPO:            q.SettingPO.clone(db),
		StatisticDataPO:      q.StatisticDataPO.clone(db),
		StatisticPO:          q.StatisticPO.clone(db),
		TeacherPO:            q.TeacherPO.clone(db),
		TrainingPlanCoursePO: q.TrainingPlanCoursePO.clone(db),
		TrainingPlanPO:       q.TrainingPlanPO.clone(db),
		UserPO:               q.UserPO.clone(db),
		UserPointDetailPO:    q.UserPointDetailPO.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                   db,
		BaseCoursePO:         q.BaseCoursePO.replaceDB(db),
		CourseCategoryPO:     q.CourseCategoryPO.replaceDB(db),
		CoursePO:             q.CoursePO.replaceDB(db),
		OfferedCoursePO:      q.OfferedCoursePO.replaceDB(db),
		RatingPO:             q.RatingPO.replaceDB(db),
		ReviewPO:             q.ReviewPO.replaceDB(db),
		ReviewReactionPO:     q.ReviewReactionPO.replaceDB(db),
		ReviewRevisionPO:     q.ReviewRevisionPO.replaceDB(db),
		SettingPO:            q.SettingPO.replaceDB(db),
		StatisticDataPO:      q.StatisticDataPO.replaceDB(db),
		StatisticPO:          q.StatisticPO.replaceDB(db),
		TeacherPO:            q.TeacherPO.replaceDB(db),
		TrainingPlanCoursePO: q.TrainingPlanCoursePO.replaceDB(db),
		TrainingPlanPO:       q.TrainingPlanPO.replaceDB(db),
		UserPO:               q.UserPO.replaceDB(db),
		UserPointDetailPO:    q.UserPointDetailPO.replaceDB(db),
	}
}

type queryCtx struct {
	BaseCoursePO         IBaseCoursePODo
	CourseCategoryPO     ICourseCategoryPODo
	CoursePO             ICoursePODo
	OfferedCoursePO      IOfferedCoursePODo
	RatingPO             IRatingPODo
	ReviewPO             IReviewPODo
	ReviewReactionPO     IReviewReactionPODo
	ReviewRevisionPO     IReviewRevisionPODo
	SettingPO            ISettingPODo
	StatisticDataPO      IStatisticDataPODo
	StatisticPO          IStatisticPODo
	TeacherPO            ITeacherPODo
	TrainingPlanCoursePO ITrainingPlanCoursePODo
	TrainingPlanPO       ITrainingPlanPODo
	UserPO               IUserPODo
	UserPointDetailPO    IUserPointDetailPODo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		BaseCoursePO:         q.BaseCoursePO.WithContext(ctx),
		CourseCategoryPO:     q.CourseCategoryPO.WithContext(ctx),
		CoursePO:             q.CoursePO.WithContext(ctx),
		OfferedCoursePO:      q.OfferedCoursePO.WithContext(ctx),
		RatingPO:             q.RatingPO.WithContext(ctx),
		ReviewPO:             q.ReviewPO.WithContext(ctx),
		ReviewReactionPO:     q.ReviewReactionPO.WithContext(ctx),
		ReviewRevisionPO:     q.ReviewRevisionPO.WithContext(ctx),
		SettingPO:            q.SettingPO.WithContext(ctx),
		StatisticDataPO:      q.StatisticDataPO.WithContext(ctx),
		StatisticPO:          q.StatisticPO.WithContext(ctx),
		TeacherPO:            q.TeacherPO.WithContext(ctx),
		TrainingPlanCoursePO: q.TrainingPlanCoursePO.WithContext(ctx),
		TrainingPlanPO:       q.TrainingPlanPO.WithContext(ctx),
		UserPO:               q.UserPO.WithContext(ctx),
		UserPointDetailPO:    q.UserPointDetailPO.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
