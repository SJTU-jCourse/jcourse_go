// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repository

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"jcourse_go/internal/model/po"
)

func newStatisticDataPO(db *gorm.DB, opts ...gen.DOOption) statisticDataPO {
	_statisticDataPO := statisticDataPO{}

	_statisticDataPO.statisticDataPODo.UseDB(db, opts...)
	_statisticDataPO.statisticDataPODo.UseModel(&po.StatisticDataPO{})

	tableName := _statisticDataPO.statisticDataPODo.TableName()
	_statisticDataPO.ALL = field.NewAsterisk(tableName)
	_statisticDataPO.ID = field.NewInt64(tableName, "id")
	_statisticDataPO.CreatedAt = field.NewTime(tableName, "created_at")
	_statisticDataPO.StatisticID = field.NewInt64(tableName, "statistic_id")
	_statisticDataPO.Date = field.NewString(tableName, "date")
	_statisticDataPO.UVData = field.NewBytes(tableName, "uv_data")

	_statisticDataPO.fillFieldMap()

	return _statisticDataPO
}

type statisticDataPO struct {
	statisticDataPODo

	ALL         field.Asterisk
	ID          field.Int64
	CreatedAt   field.Time
	StatisticID field.Int64
	Date        field.String
	UVData      field.Bytes

	fieldMap map[string]field.Expr
}

func (s statisticDataPO) Table(newTableName string) *statisticDataPO {
	s.statisticDataPODo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s statisticDataPO) As(alias string) *statisticDataPO {
	s.statisticDataPODo.DO = *(s.statisticDataPODo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *statisticDataPO) updateTableName(table string) *statisticDataPO {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.StatisticID = field.NewInt64(table, "statistic_id")
	s.Date = field.NewString(table, "date")
	s.UVData = field.NewBytes(table, "uv_data")

	s.fillFieldMap()

	return s
}

func (s *statisticDataPO) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *statisticDataPO) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 5)
	s.fieldMap["id"] = s.ID
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["statistic_id"] = s.StatisticID
	s.fieldMap["date"] = s.Date
	s.fieldMap["uv_data"] = s.UVData
}

func (s statisticDataPO) clone(db *gorm.DB) statisticDataPO {
	s.statisticDataPODo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s statisticDataPO) replaceDB(db *gorm.DB) statisticDataPO {
	s.statisticDataPODo.ReplaceDB(db)
	return s
}

type statisticDataPODo struct{ gen.DO }

type IStatisticDataPODo interface {
	gen.SubQuery
	Debug() IStatisticDataPODo
	WithContext(ctx context.Context) IStatisticDataPODo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IStatisticDataPODo
	WriteDB() IStatisticDataPODo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IStatisticDataPODo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IStatisticDataPODo
	Not(conds ...gen.Condition) IStatisticDataPODo
	Or(conds ...gen.Condition) IStatisticDataPODo
	Select(conds ...field.Expr) IStatisticDataPODo
	Where(conds ...gen.Condition) IStatisticDataPODo
	Order(conds ...field.Expr) IStatisticDataPODo
	Distinct(cols ...field.Expr) IStatisticDataPODo
	Omit(cols ...field.Expr) IStatisticDataPODo
	Join(table schema.Tabler, on ...field.Expr) IStatisticDataPODo
	LeftJoin(table schema.Tabler, on ...field.Expr) IStatisticDataPODo
	RightJoin(table schema.Tabler, on ...field.Expr) IStatisticDataPODo
	Group(cols ...field.Expr) IStatisticDataPODo
	Having(conds ...gen.Condition) IStatisticDataPODo
	Limit(limit int) IStatisticDataPODo
	Offset(offset int) IStatisticDataPODo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IStatisticDataPODo
	Unscoped() IStatisticDataPODo
	Create(values ...*po.StatisticDataPO) error
	CreateInBatches(values []*po.StatisticDataPO, batchSize int) error
	Save(values ...*po.StatisticDataPO) error
	First() (*po.StatisticDataPO, error)
	Take() (*po.StatisticDataPO, error)
	Last() (*po.StatisticDataPO, error)
	Find() ([]*po.StatisticDataPO, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*po.StatisticDataPO, err error)
	FindInBatches(result *[]*po.StatisticDataPO, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*po.StatisticDataPO) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IStatisticDataPODo
	Assign(attrs ...field.AssignExpr) IStatisticDataPODo
	Joins(fields ...field.RelationField) IStatisticDataPODo
	Preload(fields ...field.RelationField) IStatisticDataPODo
	FirstOrInit() (*po.StatisticDataPO, error)
	FirstOrCreate() (*po.StatisticDataPO, error)
	FindByPage(offset int, limit int) (result []*po.StatisticDataPO, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IStatisticDataPODo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s statisticDataPODo) Debug() IStatisticDataPODo {
	return s.withDO(s.DO.Debug())
}

func (s statisticDataPODo) WithContext(ctx context.Context) IStatisticDataPODo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s statisticDataPODo) ReadDB() IStatisticDataPODo {
	return s.Clauses(dbresolver.Read)
}

func (s statisticDataPODo) WriteDB() IStatisticDataPODo {
	return s.Clauses(dbresolver.Write)
}

func (s statisticDataPODo) Session(config *gorm.Session) IStatisticDataPODo {
	return s.withDO(s.DO.Session(config))
}

func (s statisticDataPODo) Clauses(conds ...clause.Expression) IStatisticDataPODo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s statisticDataPODo) Returning(value interface{}, columns ...string) IStatisticDataPODo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s statisticDataPODo) Not(conds ...gen.Condition) IStatisticDataPODo {
	return s.withDO(s.DO.Not(conds...))
}

func (s statisticDataPODo) Or(conds ...gen.Condition) IStatisticDataPODo {
	return s.withDO(s.DO.Or(conds...))
}

func (s statisticDataPODo) Select(conds ...field.Expr) IStatisticDataPODo {
	return s.withDO(s.DO.Select(conds...))
}

func (s statisticDataPODo) Where(conds ...gen.Condition) IStatisticDataPODo {
	return s.withDO(s.DO.Where(conds...))
}

func (s statisticDataPODo) Order(conds ...field.Expr) IStatisticDataPODo {
	return s.withDO(s.DO.Order(conds...))
}

func (s statisticDataPODo) Distinct(cols ...field.Expr) IStatisticDataPODo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s statisticDataPODo) Omit(cols ...field.Expr) IStatisticDataPODo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s statisticDataPODo) Join(table schema.Tabler, on ...field.Expr) IStatisticDataPODo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s statisticDataPODo) LeftJoin(table schema.Tabler, on ...field.Expr) IStatisticDataPODo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s statisticDataPODo) RightJoin(table schema.Tabler, on ...field.Expr) IStatisticDataPODo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s statisticDataPODo) Group(cols ...field.Expr) IStatisticDataPODo {
	return s.withDO(s.DO.Group(cols...))
}

func (s statisticDataPODo) Having(conds ...gen.Condition) IStatisticDataPODo {
	return s.withDO(s.DO.Having(conds...))
}

func (s statisticDataPODo) Limit(limit int) IStatisticDataPODo {
	return s.withDO(s.DO.Limit(limit))
}

func (s statisticDataPODo) Offset(offset int) IStatisticDataPODo {
	return s.withDO(s.DO.Offset(offset))
}

func (s statisticDataPODo) Scopes(funcs ...func(gen.Dao) gen.Dao) IStatisticDataPODo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s statisticDataPODo) Unscoped() IStatisticDataPODo {
	return s.withDO(s.DO.Unscoped())
}

func (s statisticDataPODo) Create(values ...*po.StatisticDataPO) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s statisticDataPODo) CreateInBatches(values []*po.StatisticDataPO, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s statisticDataPODo) Save(values ...*po.StatisticDataPO) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s statisticDataPODo) First() (*po.StatisticDataPO, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*po.StatisticDataPO), nil
	}
}

func (s statisticDataPODo) Take() (*po.StatisticDataPO, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*po.StatisticDataPO), nil
	}
}

func (s statisticDataPODo) Last() (*po.StatisticDataPO, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*po.StatisticDataPO), nil
	}
}

func (s statisticDataPODo) Find() ([]*po.StatisticDataPO, error) {
	result, err := s.DO.Find()
	return result.([]*po.StatisticDataPO), err
}

func (s statisticDataPODo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*po.StatisticDataPO, err error) {
	buf := make([]*po.StatisticDataPO, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s statisticDataPODo) FindInBatches(result *[]*po.StatisticDataPO, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s statisticDataPODo) Attrs(attrs ...field.AssignExpr) IStatisticDataPODo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s statisticDataPODo) Assign(attrs ...field.AssignExpr) IStatisticDataPODo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s statisticDataPODo) Joins(fields ...field.RelationField) IStatisticDataPODo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s statisticDataPODo) Preload(fields ...field.RelationField) IStatisticDataPODo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s statisticDataPODo) FirstOrInit() (*po.StatisticDataPO, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*po.StatisticDataPO), nil
	}
}

func (s statisticDataPODo) FirstOrCreate() (*po.StatisticDataPO, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*po.StatisticDataPO), nil
	}
}

func (s statisticDataPODo) FindByPage(offset int, limit int) (result []*po.StatisticDataPO, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s statisticDataPODo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s statisticDataPODo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s statisticDataPODo) Delete(models ...*po.StatisticDataPO) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *statisticDataPODo) withDO(do gen.Dao) *statisticDataPODo {
	s.DO = *do.(*gen.DO)
	return s
}
