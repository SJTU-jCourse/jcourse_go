// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repository

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	po2 "jcourse_go/internal/model/po"
)

func newTeacherPO(db *gorm.DB, opts ...gen.DOOption) teacherPO {
	_teacherPO := teacherPO{}

	_teacherPO.teacherPODo.UseDB(db, opts...)
	_teacherPO.teacherPODo.UseModel(&po2.TeacherPO{})

	tableName := _teacherPO.teacherPODo.TableName()
	_teacherPO.ALL = field.NewAsterisk(tableName)
	_teacherPO.ID = field.NewInt64(tableName, "id")
	_teacherPO.CreatedAt = field.NewTime(tableName, "created_at")
	_teacherPO.UpdatedAt = field.NewTime(tableName, "updated_at")
	_teacherPO.Name = field.NewString(tableName, "name")
	_teacherPO.Code = field.NewString(tableName, "code")
	_teacherPO.Email = field.NewString(tableName, "email")
	_teacherPO.Department = field.NewString(tableName, "department")
	_teacherPO.Title = field.NewString(tableName, "title")
	_teacherPO.Pinyin = field.NewString(tableName, "pinyin")
	_teacherPO.PinyinAbbr = field.NewString(tableName, "pinyin_abbr")
	_teacherPO.Picture = field.NewString(tableName, "picture")
	_teacherPO.ProfileURL = field.NewString(tableName, "profile_url")
	_teacherPO.Biography = field.NewString(tableName, "biography")
	_teacherPO.RatingCount = field.NewInt64(tableName, "rating_count")
	_teacherPO.RatingAvg = field.NewFloat64(tableName, "rating_avg")
	_teacherPO.SearchIndex = field.NewField(tableName, "search_index")
	_teacherPO.Courses = teacherPOHasManyCourses{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Courses", "po.CoursePO"),
		MainTeacher: struct {
			field.RelationField
			Courses struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Courses.MainTeacher", "po.TeacherPO"),
			Courses: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Courses.MainTeacher.Courses", "po.CoursePO"),
			},
		},
		Categories: struct {
			field.RelationField
			Course struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Courses.Categories", "po.CourseCategoryPO"),
			Course: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Courses.Categories.Course", "po.CoursePO"),
			},
		},
		OfferedCourses: struct {
			field.RelationField
			Course struct {
				field.RelationField
			}
			MainTeacher struct {
				field.RelationField
			}
			OfferedCourseTeacher struct {
				field.RelationField
				Course struct {
					field.RelationField
				}
				OfferedCourse struct {
					field.RelationField
				}
				MainTeacher struct {
					field.RelationField
				}
				Teacher struct {
					field.RelationField
				}
			}
		}{
			RelationField: field.NewRelation("Courses.OfferedCourses", "po.OfferedCoursePO"),
			Course: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Courses.OfferedCourses.Course", "po.CoursePO"),
			},
			MainTeacher: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Courses.OfferedCourses.MainTeacher", "po.TeacherPO"),
			},
			OfferedCourseTeacher: struct {
				field.RelationField
				Course struct {
					field.RelationField
				}
				OfferedCourse struct {
					field.RelationField
				}
				MainTeacher struct {
					field.RelationField
				}
				Teacher struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Courses.OfferedCourses.OfferedCourseTeacher", "po.OfferedCourseTeacherPO"),
				Course: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Courses.OfferedCourses.OfferedCourseTeacher.Course", "po.CoursePO"),
				},
				OfferedCourse: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Courses.OfferedCourses.OfferedCourseTeacher.OfferedCourse", "po.OfferedCoursePO"),
				},
				MainTeacher: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Courses.OfferedCourses.OfferedCourseTeacher.MainTeacher", "po.TeacherPO"),
				},
				Teacher: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Courses.OfferedCourses.OfferedCourseTeacher.Teacher", "po.TeacherPO"),
				},
			},
		},
	}

	_teacherPO.fillFieldMap()

	return _teacherPO
}

type teacherPO struct {
	teacherPODo

	ALL         field.Asterisk
	ID          field.Int64
	CreatedAt   field.Time
	UpdatedAt   field.Time
	Name        field.String
	Code        field.String
	Email       field.String
	Department  field.String
	Title       field.String
	Pinyin      field.String
	PinyinAbbr  field.String
	Picture     field.String
	ProfileURL  field.String
	Biography   field.String
	RatingCount field.Int64
	RatingAvg   field.Float64
	SearchIndex field.Field
	Courses     teacherPOHasManyCourses

	fieldMap map[string]field.Expr
}

func (t teacherPO) Table(newTableName string) *teacherPO {
	t.teacherPODo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t teacherPO) As(alias string) *teacherPO {
	t.teacherPODo.DO = *(t.teacherPODo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *teacherPO) updateTableName(table string) *teacherPO {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt64(table, "id")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.Name = field.NewString(table, "name")
	t.Code = field.NewString(table, "code")
	t.Email = field.NewString(table, "email")
	t.Department = field.NewString(table, "department")
	t.Title = field.NewString(table, "title")
	t.Pinyin = field.NewString(table, "pinyin")
	t.PinyinAbbr = field.NewString(table, "pinyin_abbr")
	t.Picture = field.NewString(table, "picture")
	t.ProfileURL = field.NewString(table, "profile_url")
	t.Biography = field.NewString(table, "biography")
	t.RatingCount = field.NewInt64(table, "rating_count")
	t.RatingAvg = field.NewFloat64(table, "rating_avg")
	t.SearchIndex = field.NewField(table, "search_index")

	t.fillFieldMap()

	return t
}

func (t *teacherPO) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *teacherPO) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 17)
	t.fieldMap["id"] = t.ID
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["name"] = t.Name
	t.fieldMap["code"] = t.Code
	t.fieldMap["email"] = t.Email
	t.fieldMap["department"] = t.Department
	t.fieldMap["title"] = t.Title
	t.fieldMap["pinyin"] = t.Pinyin
	t.fieldMap["pinyin_abbr"] = t.PinyinAbbr
	t.fieldMap["picture"] = t.Picture
	t.fieldMap["profile_url"] = t.ProfileURL
	t.fieldMap["biography"] = t.Biography
	t.fieldMap["rating_count"] = t.RatingCount
	t.fieldMap["rating_avg"] = t.RatingAvg
	t.fieldMap["search_index"] = t.SearchIndex

}

func (t teacherPO) clone(db *gorm.DB) teacherPO {
	t.teacherPODo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t teacherPO) replaceDB(db *gorm.DB) teacherPO {
	t.teacherPODo.ReplaceDB(db)
	return t
}

type teacherPOHasManyCourses struct {
	db *gorm.DB

	field.RelationField

	MainTeacher struct {
		field.RelationField
		Courses struct {
			field.RelationField
		}
	}
	Categories struct {
		field.RelationField
		Course struct {
			field.RelationField
		}
	}
	OfferedCourses struct {
		field.RelationField
		Course struct {
			field.RelationField
		}
		MainTeacher struct {
			field.RelationField
		}
		OfferedCourseTeacher struct {
			field.RelationField
			Course struct {
				field.RelationField
			}
			OfferedCourse struct {
				field.RelationField
			}
			MainTeacher struct {
				field.RelationField
			}
			Teacher struct {
				field.RelationField
			}
		}
	}
}

func (a teacherPOHasManyCourses) Where(conds ...field.Expr) *teacherPOHasManyCourses {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a teacherPOHasManyCourses) WithContext(ctx context.Context) *teacherPOHasManyCourses {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a teacherPOHasManyCourses) Session(session *gorm.Session) *teacherPOHasManyCourses {
	a.db = a.db.Session(session)
	return &a
}

func (a teacherPOHasManyCourses) Model(m *po2.TeacherPO) *teacherPOHasManyCoursesTx {
	return &teacherPOHasManyCoursesTx{a.db.Model(m).Association(a.Name())}
}

type teacherPOHasManyCoursesTx struct{ tx *gorm.Association }

func (a teacherPOHasManyCoursesTx) Find() (result []*po2.CoursePO, err error) {
	return result, a.tx.Find(&result)
}

func (a teacherPOHasManyCoursesTx) Append(values ...*po2.CoursePO) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a teacherPOHasManyCoursesTx) Replace(values ...*po2.CoursePO) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a teacherPOHasManyCoursesTx) Delete(values ...*po2.CoursePO) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a teacherPOHasManyCoursesTx) Clear() error {
	return a.tx.Clear()
}

func (a teacherPOHasManyCoursesTx) Count() int64 {
	return a.tx.Count()
}

type teacherPODo struct{ gen.DO }

type ITeacherPODo interface {
	gen.SubQuery
	Debug() ITeacherPODo
	WithContext(ctx context.Context) ITeacherPODo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITeacherPODo
	WriteDB() ITeacherPODo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITeacherPODo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITeacherPODo
	Not(conds ...gen.Condition) ITeacherPODo
	Or(conds ...gen.Condition) ITeacherPODo
	Select(conds ...field.Expr) ITeacherPODo
	Where(conds ...gen.Condition) ITeacherPODo
	Order(conds ...field.Expr) ITeacherPODo
	Distinct(cols ...field.Expr) ITeacherPODo
	Omit(cols ...field.Expr) ITeacherPODo
	Join(table schema.Tabler, on ...field.Expr) ITeacherPODo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITeacherPODo
	RightJoin(table schema.Tabler, on ...field.Expr) ITeacherPODo
	Group(cols ...field.Expr) ITeacherPODo
	Having(conds ...gen.Condition) ITeacherPODo
	Limit(limit int) ITeacherPODo
	Offset(offset int) ITeacherPODo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITeacherPODo
	Unscoped() ITeacherPODo
	Create(values ...*po2.TeacherPO) error
	CreateInBatches(values []*po2.TeacherPO, batchSize int) error
	Save(values ...*po2.TeacherPO) error
	First() (*po2.TeacherPO, error)
	Take() (*po2.TeacherPO, error)
	Last() (*po2.TeacherPO, error)
	Find() ([]*po2.TeacherPO, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*po2.TeacherPO, err error)
	FindInBatches(result *[]*po2.TeacherPO, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*po2.TeacherPO) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITeacherPODo
	Assign(attrs ...field.AssignExpr) ITeacherPODo
	Joins(fields ...field.RelationField) ITeacherPODo
	Preload(fields ...field.RelationField) ITeacherPODo
	FirstOrInit() (*po2.TeacherPO, error)
	FirstOrCreate() (*po2.TeacherPO, error)
	FindByPage(offset int, limit int) (result []*po2.TeacherPO, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITeacherPODo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t teacherPODo) Debug() ITeacherPODo {
	return t.withDO(t.DO.Debug())
}

func (t teacherPODo) WithContext(ctx context.Context) ITeacherPODo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t teacherPODo) ReadDB() ITeacherPODo {
	return t.Clauses(dbresolver.Read)
}

func (t teacherPODo) WriteDB() ITeacherPODo {
	return t.Clauses(dbresolver.Write)
}

func (t teacherPODo) Session(config *gorm.Session) ITeacherPODo {
	return t.withDO(t.DO.Session(config))
}

func (t teacherPODo) Clauses(conds ...clause.Expression) ITeacherPODo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t teacherPODo) Returning(value interface{}, columns ...string) ITeacherPODo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t teacherPODo) Not(conds ...gen.Condition) ITeacherPODo {
	return t.withDO(t.DO.Not(conds...))
}

func (t teacherPODo) Or(conds ...gen.Condition) ITeacherPODo {
	return t.withDO(t.DO.Or(conds...))
}

func (t teacherPODo) Select(conds ...field.Expr) ITeacherPODo {
	return t.withDO(t.DO.Select(conds...))
}

func (t teacherPODo) Where(conds ...gen.Condition) ITeacherPODo {
	return t.withDO(t.DO.Where(conds...))
}

func (t teacherPODo) Order(conds ...field.Expr) ITeacherPODo {
	return t.withDO(t.DO.Order(conds...))
}

func (t teacherPODo) Distinct(cols ...field.Expr) ITeacherPODo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t teacherPODo) Omit(cols ...field.Expr) ITeacherPODo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t teacherPODo) Join(table schema.Tabler, on ...field.Expr) ITeacherPODo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t teacherPODo) LeftJoin(table schema.Tabler, on ...field.Expr) ITeacherPODo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t teacherPODo) RightJoin(table schema.Tabler, on ...field.Expr) ITeacherPODo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t teacherPODo) Group(cols ...field.Expr) ITeacherPODo {
	return t.withDO(t.DO.Group(cols...))
}

func (t teacherPODo) Having(conds ...gen.Condition) ITeacherPODo {
	return t.withDO(t.DO.Having(conds...))
}

func (t teacherPODo) Limit(limit int) ITeacherPODo {
	return t.withDO(t.DO.Limit(limit))
}

func (t teacherPODo) Offset(offset int) ITeacherPODo {
	return t.withDO(t.DO.Offset(offset))
}

func (t teacherPODo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITeacherPODo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t teacherPODo) Unscoped() ITeacherPODo {
	return t.withDO(t.DO.Unscoped())
}

func (t teacherPODo) Create(values ...*po2.TeacherPO) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t teacherPODo) CreateInBatches(values []*po2.TeacherPO, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t teacherPODo) Save(values ...*po2.TeacherPO) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t teacherPODo) First() (*po2.TeacherPO, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*po2.TeacherPO), nil
	}
}

func (t teacherPODo) Take() (*po2.TeacherPO, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*po2.TeacherPO), nil
	}
}

func (t teacherPODo) Last() (*po2.TeacherPO, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*po2.TeacherPO), nil
	}
}

func (t teacherPODo) Find() ([]*po2.TeacherPO, error) {
	result, err := t.DO.Find()
	return result.([]*po2.TeacherPO), err
}

func (t teacherPODo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*po2.TeacherPO, err error) {
	buf := make([]*po2.TeacherPO, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t teacherPODo) FindInBatches(result *[]*po2.TeacherPO, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t teacherPODo) Attrs(attrs ...field.AssignExpr) ITeacherPODo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t teacherPODo) Assign(attrs ...field.AssignExpr) ITeacherPODo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t teacherPODo) Joins(fields ...field.RelationField) ITeacherPODo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t teacherPODo) Preload(fields ...field.RelationField) ITeacherPODo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t teacherPODo) FirstOrInit() (*po2.TeacherPO, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*po2.TeacherPO), nil
	}
}

func (t teacherPODo) FirstOrCreate() (*po2.TeacherPO, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*po2.TeacherPO), nil
	}
}

func (t teacherPODo) FindByPage(offset int, limit int) (result []*po2.TeacherPO, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t teacherPODo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t teacherPODo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t teacherPODo) Delete(models ...*po2.TeacherPO) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *teacherPODo) withDO(do gen.Dao) *teacherPODo {
	t.DO = *do.(*gen.DO)
	return t
}
