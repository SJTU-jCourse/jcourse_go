// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repository

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	po2 "jcourse_go/internal/model/po"
)

func newRatingPO(db *gorm.DB, opts ...gen.DOOption) ratingPO {
	_ratingPO := ratingPO{}

	_ratingPO.ratingPODo.UseDB(db, opts...)
	_ratingPO.ratingPODo.UseModel(&po2.RatingPO{})

	tableName := _ratingPO.ratingPODo.TableName()
	_ratingPO.ALL = field.NewAsterisk(tableName)
	_ratingPO.ID = field.NewInt64(tableName, "id")
	_ratingPO.CreatedAt = field.NewTime(tableName, "created_at")
	_ratingPO.UpdatedAt = field.NewTime(tableName, "updated_at")
	_ratingPO.UserID = field.NewInt64(tableName, "user_id")
	_ratingPO.RelatedType = field.NewString(tableName, "related_type")
	_ratingPO.RelatedID = field.NewInt64(tableName, "related_id")
	_ratingPO.Rating = field.NewInt64(tableName, "rating")
	_ratingPO.User = ratingPOBelongsToUser{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("User", "po.UserPO"),
		UserPointDetails: struct {
			field.RelationField
			User struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("User.UserPointDetails", "po.UserPointDetailPO"),
			User: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("User.UserPointDetails.User", "po.UserPO"),
			},
		},
	}

	_ratingPO.fillFieldMap()

	return _ratingPO
}

type ratingPO struct {
	ratingPODo

	ALL         field.Asterisk
	ID          field.Int64
	CreatedAt   field.Time
	UpdatedAt   field.Time
	UserID      field.Int64
	RelatedType field.String
	RelatedID   field.Int64
	Rating      field.Int64
	User        ratingPOBelongsToUser

	fieldMap map[string]field.Expr
}

func (r ratingPO) Table(newTableName string) *ratingPO {
	r.ratingPODo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r ratingPO) As(alias string) *ratingPO {
	r.ratingPODo.DO = *(r.ratingPODo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *ratingPO) updateTableName(table string) *ratingPO {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewInt64(table, "id")
	r.CreatedAt = field.NewTime(table, "created_at")
	r.UpdatedAt = field.NewTime(table, "updated_at")
	r.UserID = field.NewInt64(table, "user_id")
	r.RelatedType = field.NewString(table, "related_type")
	r.RelatedID = field.NewInt64(table, "related_id")
	r.Rating = field.NewInt64(table, "rating")

	r.fillFieldMap()

	return r
}

func (r *ratingPO) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *ratingPO) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 8)
	r.fieldMap["id"] = r.ID
	r.fieldMap["created_at"] = r.CreatedAt
	r.fieldMap["updated_at"] = r.UpdatedAt
	r.fieldMap["user_id"] = r.UserID
	r.fieldMap["related_type"] = r.RelatedType
	r.fieldMap["related_id"] = r.RelatedID
	r.fieldMap["rating"] = r.Rating

}

func (r ratingPO) clone(db *gorm.DB) ratingPO {
	r.ratingPODo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r ratingPO) replaceDB(db *gorm.DB) ratingPO {
	r.ratingPODo.ReplaceDB(db)
	return r
}

type ratingPOBelongsToUser struct {
	db *gorm.DB

	field.RelationField

	UserPointDetails struct {
		field.RelationField
		User struct {
			field.RelationField
		}
	}
}

func (a ratingPOBelongsToUser) Where(conds ...field.Expr) *ratingPOBelongsToUser {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a ratingPOBelongsToUser) WithContext(ctx context.Context) *ratingPOBelongsToUser {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a ratingPOBelongsToUser) Session(session *gorm.Session) *ratingPOBelongsToUser {
	a.db = a.db.Session(session)
	return &a
}

func (a ratingPOBelongsToUser) Model(m *po2.RatingPO) *ratingPOBelongsToUserTx {
	return &ratingPOBelongsToUserTx{a.db.Model(m).Association(a.Name())}
}

type ratingPOBelongsToUserTx struct{ tx *gorm.Association }

func (a ratingPOBelongsToUserTx) Find() (result *po2.UserPO, err error) {
	return result, a.tx.Find(&result)
}

func (a ratingPOBelongsToUserTx) Append(values ...*po2.UserPO) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a ratingPOBelongsToUserTx) Replace(values ...*po2.UserPO) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a ratingPOBelongsToUserTx) Delete(values ...*po2.UserPO) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a ratingPOBelongsToUserTx) Clear() error {
	return a.tx.Clear()
}

func (a ratingPOBelongsToUserTx) Count() int64 {
	return a.tx.Count()
}

type ratingPODo struct{ gen.DO }

type IRatingPODo interface {
	gen.SubQuery
	Debug() IRatingPODo
	WithContext(ctx context.Context) IRatingPODo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IRatingPODo
	WriteDB() IRatingPODo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IRatingPODo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRatingPODo
	Not(conds ...gen.Condition) IRatingPODo
	Or(conds ...gen.Condition) IRatingPODo
	Select(conds ...field.Expr) IRatingPODo
	Where(conds ...gen.Condition) IRatingPODo
	Order(conds ...field.Expr) IRatingPODo
	Distinct(cols ...field.Expr) IRatingPODo
	Omit(cols ...field.Expr) IRatingPODo
	Join(table schema.Tabler, on ...field.Expr) IRatingPODo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRatingPODo
	RightJoin(table schema.Tabler, on ...field.Expr) IRatingPODo
	Group(cols ...field.Expr) IRatingPODo
	Having(conds ...gen.Condition) IRatingPODo
	Limit(limit int) IRatingPODo
	Offset(offset int) IRatingPODo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRatingPODo
	Unscoped() IRatingPODo
	Create(values ...*po2.RatingPO) error
	CreateInBatches(values []*po2.RatingPO, batchSize int) error
	Save(values ...*po2.RatingPO) error
	First() (*po2.RatingPO, error)
	Take() (*po2.RatingPO, error)
	Last() (*po2.RatingPO, error)
	Find() ([]*po2.RatingPO, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*po2.RatingPO, err error)
	FindInBatches(result *[]*po2.RatingPO, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*po2.RatingPO) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRatingPODo
	Assign(attrs ...field.AssignExpr) IRatingPODo
	Joins(fields ...field.RelationField) IRatingPODo
	Preload(fields ...field.RelationField) IRatingPODo
	FirstOrInit() (*po2.RatingPO, error)
	FirstOrCreate() (*po2.RatingPO, error)
	FindByPage(offset int, limit int) (result []*po2.RatingPO, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRatingPODo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r ratingPODo) Debug() IRatingPODo {
	return r.withDO(r.DO.Debug())
}

func (r ratingPODo) WithContext(ctx context.Context) IRatingPODo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r ratingPODo) ReadDB() IRatingPODo {
	return r.Clauses(dbresolver.Read)
}

func (r ratingPODo) WriteDB() IRatingPODo {
	return r.Clauses(dbresolver.Write)
}

func (r ratingPODo) Session(config *gorm.Session) IRatingPODo {
	return r.withDO(r.DO.Session(config))
}

func (r ratingPODo) Clauses(conds ...clause.Expression) IRatingPODo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r ratingPODo) Returning(value interface{}, columns ...string) IRatingPODo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r ratingPODo) Not(conds ...gen.Condition) IRatingPODo {
	return r.withDO(r.DO.Not(conds...))
}

func (r ratingPODo) Or(conds ...gen.Condition) IRatingPODo {
	return r.withDO(r.DO.Or(conds...))
}

func (r ratingPODo) Select(conds ...field.Expr) IRatingPODo {
	return r.withDO(r.DO.Select(conds...))
}

func (r ratingPODo) Where(conds ...gen.Condition) IRatingPODo {
	return r.withDO(r.DO.Where(conds...))
}

func (r ratingPODo) Order(conds ...field.Expr) IRatingPODo {
	return r.withDO(r.DO.Order(conds...))
}

func (r ratingPODo) Distinct(cols ...field.Expr) IRatingPODo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r ratingPODo) Omit(cols ...field.Expr) IRatingPODo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r ratingPODo) Join(table schema.Tabler, on ...field.Expr) IRatingPODo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r ratingPODo) LeftJoin(table schema.Tabler, on ...field.Expr) IRatingPODo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r ratingPODo) RightJoin(table schema.Tabler, on ...field.Expr) IRatingPODo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r ratingPODo) Group(cols ...field.Expr) IRatingPODo {
	return r.withDO(r.DO.Group(cols...))
}

func (r ratingPODo) Having(conds ...gen.Condition) IRatingPODo {
	return r.withDO(r.DO.Having(conds...))
}

func (r ratingPODo) Limit(limit int) IRatingPODo {
	return r.withDO(r.DO.Limit(limit))
}

func (r ratingPODo) Offset(offset int) IRatingPODo {
	return r.withDO(r.DO.Offset(offset))
}

func (r ratingPODo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRatingPODo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r ratingPODo) Unscoped() IRatingPODo {
	return r.withDO(r.DO.Unscoped())
}

func (r ratingPODo) Create(values ...*po2.RatingPO) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r ratingPODo) CreateInBatches(values []*po2.RatingPO, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r ratingPODo) Save(values ...*po2.RatingPO) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r ratingPODo) First() (*po2.RatingPO, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*po2.RatingPO), nil
	}
}

func (r ratingPODo) Take() (*po2.RatingPO, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*po2.RatingPO), nil
	}
}

func (r ratingPODo) Last() (*po2.RatingPO, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*po2.RatingPO), nil
	}
}

func (r ratingPODo) Find() ([]*po2.RatingPO, error) {
	result, err := r.DO.Find()
	return result.([]*po2.RatingPO), err
}

func (r ratingPODo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*po2.RatingPO, err error) {
	buf := make([]*po2.RatingPO, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r ratingPODo) FindInBatches(result *[]*po2.RatingPO, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r ratingPODo) Attrs(attrs ...field.AssignExpr) IRatingPODo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r ratingPODo) Assign(attrs ...field.AssignExpr) IRatingPODo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r ratingPODo) Joins(fields ...field.RelationField) IRatingPODo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r ratingPODo) Preload(fields ...field.RelationField) IRatingPODo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r ratingPODo) FirstOrInit() (*po2.RatingPO, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*po2.RatingPO), nil
	}
}

func (r ratingPODo) FirstOrCreate() (*po2.RatingPO, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*po2.RatingPO), nil
	}
}

func (r ratingPODo) FindByPage(offset int, limit int) (result []*po2.RatingPO, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r ratingPODo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r ratingPODo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r ratingPODo) Delete(models ...*po2.RatingPO) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *ratingPODo) withDO(do gen.Dao) *ratingPODo {
	r.DO = *do.(*gen.DO)
	return r
}
