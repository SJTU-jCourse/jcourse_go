// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repository

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"jcourse_go/internal/model/po"
)

func newStatisticPO(db *gorm.DB, opts ...gen.DOOption) statisticPO {
	_statisticPO := statisticPO{}

	_statisticPO.statisticPODo.UseDB(db, opts...)
	_statisticPO.statisticPODo.UseModel(&po.StatisticPO{})

	tableName := _statisticPO.statisticPODo.TableName()
	_statisticPO.ALL = field.NewAsterisk(tableName)
	_statisticPO.ID = field.NewInt64(tableName, "id")
	_statisticPO.CreatedAt = field.NewTime(tableName, "created_at")
	_statisticPO.UVCount = field.NewInt64(tableName, "uv_count")
	_statisticPO.PVCount = field.NewInt64(tableName, "pv_count")
	_statisticPO.Date = field.NewString(tableName, "date")
	_statisticPO.NewUsers = field.NewInt64(tableName, "new_users")
	_statisticPO.NewReviews = field.NewInt64(tableName, "new_reviews")
	_statisticPO.TotalUsers = field.NewInt64(tableName, "total_users")
	_statisticPO.TotalReviews = field.NewInt64(tableName, "total_reviews")

	_statisticPO.fillFieldMap()

	return _statisticPO
}

type statisticPO struct {
	statisticPODo

	ALL          field.Asterisk
	ID           field.Int64
	CreatedAt    field.Time
	UVCount      field.Int64
	PVCount      field.Int64
	Date         field.String
	NewUsers     field.Int64
	NewReviews   field.Int64
	TotalUsers   field.Int64
	TotalReviews field.Int64

	fieldMap map[string]field.Expr
}

func (s statisticPO) Table(newTableName string) *statisticPO {
	s.statisticPODo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s statisticPO) As(alias string) *statisticPO {
	s.statisticPODo.DO = *(s.statisticPODo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *statisticPO) updateTableName(table string) *statisticPO {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UVCount = field.NewInt64(table, "uv_count")
	s.PVCount = field.NewInt64(table, "pv_count")
	s.Date = field.NewString(table, "date")
	s.NewUsers = field.NewInt64(table, "new_users")
	s.NewReviews = field.NewInt64(table, "new_reviews")
	s.TotalUsers = field.NewInt64(table, "total_users")
	s.TotalReviews = field.NewInt64(table, "total_reviews")

	s.fillFieldMap()

	return s
}

func (s *statisticPO) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *statisticPO) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 9)
	s.fieldMap["id"] = s.ID
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["uv_count"] = s.UVCount
	s.fieldMap["pv_count"] = s.PVCount
	s.fieldMap["date"] = s.Date
	s.fieldMap["new_users"] = s.NewUsers
	s.fieldMap["new_reviews"] = s.NewReviews
	s.fieldMap["total_users"] = s.TotalUsers
	s.fieldMap["total_reviews"] = s.TotalReviews
}

func (s statisticPO) clone(db *gorm.DB) statisticPO {
	s.statisticPODo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s statisticPO) replaceDB(db *gorm.DB) statisticPO {
	s.statisticPODo.ReplaceDB(db)
	return s
}

type statisticPODo struct{ gen.DO }

type IStatisticPODo interface {
	gen.SubQuery
	Debug() IStatisticPODo
	WithContext(ctx context.Context) IStatisticPODo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IStatisticPODo
	WriteDB() IStatisticPODo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IStatisticPODo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IStatisticPODo
	Not(conds ...gen.Condition) IStatisticPODo
	Or(conds ...gen.Condition) IStatisticPODo
	Select(conds ...field.Expr) IStatisticPODo
	Where(conds ...gen.Condition) IStatisticPODo
	Order(conds ...field.Expr) IStatisticPODo
	Distinct(cols ...field.Expr) IStatisticPODo
	Omit(cols ...field.Expr) IStatisticPODo
	Join(table schema.Tabler, on ...field.Expr) IStatisticPODo
	LeftJoin(table schema.Tabler, on ...field.Expr) IStatisticPODo
	RightJoin(table schema.Tabler, on ...field.Expr) IStatisticPODo
	Group(cols ...field.Expr) IStatisticPODo
	Having(conds ...gen.Condition) IStatisticPODo
	Limit(limit int) IStatisticPODo
	Offset(offset int) IStatisticPODo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IStatisticPODo
	Unscoped() IStatisticPODo
	Create(values ...*po.StatisticPO) error
	CreateInBatches(values []*po.StatisticPO, batchSize int) error
	Save(values ...*po.StatisticPO) error
	First() (*po.StatisticPO, error)
	Take() (*po.StatisticPO, error)
	Last() (*po.StatisticPO, error)
	Find() ([]*po.StatisticPO, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*po.StatisticPO, err error)
	FindInBatches(result *[]*po.StatisticPO, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*po.StatisticPO) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IStatisticPODo
	Assign(attrs ...field.AssignExpr) IStatisticPODo
	Joins(fields ...field.RelationField) IStatisticPODo
	Preload(fields ...field.RelationField) IStatisticPODo
	FirstOrInit() (*po.StatisticPO, error)
	FirstOrCreate() (*po.StatisticPO, error)
	FindByPage(offset int, limit int) (result []*po.StatisticPO, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IStatisticPODo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s statisticPODo) Debug() IStatisticPODo {
	return s.withDO(s.DO.Debug())
}

func (s statisticPODo) WithContext(ctx context.Context) IStatisticPODo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s statisticPODo) ReadDB() IStatisticPODo {
	return s.Clauses(dbresolver.Read)
}

func (s statisticPODo) WriteDB() IStatisticPODo {
	return s.Clauses(dbresolver.Write)
}

func (s statisticPODo) Session(config *gorm.Session) IStatisticPODo {
	return s.withDO(s.DO.Session(config))
}

func (s statisticPODo) Clauses(conds ...clause.Expression) IStatisticPODo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s statisticPODo) Returning(value interface{}, columns ...string) IStatisticPODo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s statisticPODo) Not(conds ...gen.Condition) IStatisticPODo {
	return s.withDO(s.DO.Not(conds...))
}

func (s statisticPODo) Or(conds ...gen.Condition) IStatisticPODo {
	return s.withDO(s.DO.Or(conds...))
}

func (s statisticPODo) Select(conds ...field.Expr) IStatisticPODo {
	return s.withDO(s.DO.Select(conds...))
}

func (s statisticPODo) Where(conds ...gen.Condition) IStatisticPODo {
	return s.withDO(s.DO.Where(conds...))
}

func (s statisticPODo) Order(conds ...field.Expr) IStatisticPODo {
	return s.withDO(s.DO.Order(conds...))
}

func (s statisticPODo) Distinct(cols ...field.Expr) IStatisticPODo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s statisticPODo) Omit(cols ...field.Expr) IStatisticPODo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s statisticPODo) Join(table schema.Tabler, on ...field.Expr) IStatisticPODo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s statisticPODo) LeftJoin(table schema.Tabler, on ...field.Expr) IStatisticPODo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s statisticPODo) RightJoin(table schema.Tabler, on ...field.Expr) IStatisticPODo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s statisticPODo) Group(cols ...field.Expr) IStatisticPODo {
	return s.withDO(s.DO.Group(cols...))
}

func (s statisticPODo) Having(conds ...gen.Condition) IStatisticPODo {
	return s.withDO(s.DO.Having(conds...))
}

func (s statisticPODo) Limit(limit int) IStatisticPODo {
	return s.withDO(s.DO.Limit(limit))
}

func (s statisticPODo) Offset(offset int) IStatisticPODo {
	return s.withDO(s.DO.Offset(offset))
}

func (s statisticPODo) Scopes(funcs ...func(gen.Dao) gen.Dao) IStatisticPODo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s statisticPODo) Unscoped() IStatisticPODo {
	return s.withDO(s.DO.Unscoped())
}

func (s statisticPODo) Create(values ...*po.StatisticPO) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s statisticPODo) CreateInBatches(values []*po.StatisticPO, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s statisticPODo) Save(values ...*po.StatisticPO) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s statisticPODo) First() (*po.StatisticPO, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*po.StatisticPO), nil
	}
}

func (s statisticPODo) Take() (*po.StatisticPO, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*po.StatisticPO), nil
	}
}

func (s statisticPODo) Last() (*po.StatisticPO, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*po.StatisticPO), nil
	}
}

func (s statisticPODo) Find() ([]*po.StatisticPO, error) {
	result, err := s.DO.Find()
	return result.([]*po.StatisticPO), err
}

func (s statisticPODo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*po.StatisticPO, err error) {
	buf := make([]*po.StatisticPO, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s statisticPODo) FindInBatches(result *[]*po.StatisticPO, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s statisticPODo) Attrs(attrs ...field.AssignExpr) IStatisticPODo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s statisticPODo) Assign(attrs ...field.AssignExpr) IStatisticPODo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s statisticPODo) Joins(fields ...field.RelationField) IStatisticPODo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s statisticPODo) Preload(fields ...field.RelationField) IStatisticPODo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s statisticPODo) FirstOrInit() (*po.StatisticPO, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*po.StatisticPO), nil
	}
}

func (s statisticPODo) FirstOrCreate() (*po.StatisticPO, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*po.StatisticPO), nil
	}
}

func (s statisticPODo) FindByPage(offset int, limit int) (result []*po.StatisticPO, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s statisticPODo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s statisticPODo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s statisticPODo) Delete(models ...*po.StatisticPO) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *statisticPODo) withDO(do gen.Dao) *statisticPODo {
	s.DO = *do.(*gen.DO)
	return s
}
