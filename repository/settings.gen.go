// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repository

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"jcourse_go/model/po"
)

func newSettingPO(db *gorm.DB, opts ...gen.DOOption) settingPO {
	_settingPO := settingPO{}

	_settingPO.settingPODo.UseDB(db, opts...)
	_settingPO.settingPODo.UseModel(&po.SettingPO{})

	tableName := _settingPO.settingPODo.TableName()
	_settingPO.ALL = field.NewAsterisk(tableName)
	_settingPO.ID = field.NewInt64(tableName, "id")
	_settingPO.CreatedAt = field.NewTime(tableName, "created_at")
	_settingPO.UpdatedAt = field.NewTime(tableName, "updated_at")
	_settingPO.Key = field.NewString(tableName, "key")
	_settingPO.Type = field.NewString(tableName, "type")
	_settingPO.Value = field.NewString(tableName, "value")
	_settingPO.UpdatedBy = field.NewInt64(tableName, "updated_by")
	_settingPO.Client = field.NewBool(tableName, "client")

	_settingPO.fillFieldMap()

	return _settingPO
}

type settingPO struct {
	settingPODo

	ALL       field.Asterisk
	ID        field.Int64
	CreatedAt field.Time
	UpdatedAt field.Time
	Key       field.String
	Type      field.String
	Value     field.String
	UpdatedBy field.Int64
	Client    field.Bool

	fieldMap map[string]field.Expr
}

func (s settingPO) Table(newTableName string) *settingPO {
	s.settingPODo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s settingPO) As(alias string) *settingPO {
	s.settingPODo.DO = *(s.settingPODo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *settingPO) updateTableName(table string) *settingPO {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.Key = field.NewString(table, "key")
	s.Type = field.NewString(table, "type")
	s.Value = field.NewString(table, "value")
	s.UpdatedBy = field.NewInt64(table, "updated_by")
	s.Client = field.NewBool(table, "client")

	s.fillFieldMap()

	return s
}

func (s *settingPO) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *settingPO) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 8)
	s.fieldMap["id"] = s.ID
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["key"] = s.Key
	s.fieldMap["type"] = s.Type
	s.fieldMap["value"] = s.Value
	s.fieldMap["updated_by"] = s.UpdatedBy
	s.fieldMap["client"] = s.Client
}

func (s settingPO) clone(db *gorm.DB) settingPO {
	s.settingPODo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s settingPO) replaceDB(db *gorm.DB) settingPO {
	s.settingPODo.ReplaceDB(db)
	return s
}

type settingPODo struct{ gen.DO }

type ISettingPODo interface {
	gen.SubQuery
	Debug() ISettingPODo
	WithContext(ctx context.Context) ISettingPODo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISettingPODo
	WriteDB() ISettingPODo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISettingPODo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISettingPODo
	Not(conds ...gen.Condition) ISettingPODo
	Or(conds ...gen.Condition) ISettingPODo
	Select(conds ...field.Expr) ISettingPODo
	Where(conds ...gen.Condition) ISettingPODo
	Order(conds ...field.Expr) ISettingPODo
	Distinct(cols ...field.Expr) ISettingPODo
	Omit(cols ...field.Expr) ISettingPODo
	Join(table schema.Tabler, on ...field.Expr) ISettingPODo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISettingPODo
	RightJoin(table schema.Tabler, on ...field.Expr) ISettingPODo
	Group(cols ...field.Expr) ISettingPODo
	Having(conds ...gen.Condition) ISettingPODo
	Limit(limit int) ISettingPODo
	Offset(offset int) ISettingPODo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISettingPODo
	Unscoped() ISettingPODo
	Create(values ...*po.SettingPO) error
	CreateInBatches(values []*po.SettingPO, batchSize int) error
	Save(values ...*po.SettingPO) error
	First() (*po.SettingPO, error)
	Take() (*po.SettingPO, error)
	Last() (*po.SettingPO, error)
	Find() ([]*po.SettingPO, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*po.SettingPO, err error)
	FindInBatches(result *[]*po.SettingPO, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*po.SettingPO) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISettingPODo
	Assign(attrs ...field.AssignExpr) ISettingPODo
	Joins(fields ...field.RelationField) ISettingPODo
	Preload(fields ...field.RelationField) ISettingPODo
	FirstOrInit() (*po.SettingPO, error)
	FirstOrCreate() (*po.SettingPO, error)
	FindByPage(offset int, limit int) (result []*po.SettingPO, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISettingPODo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s settingPODo) Debug() ISettingPODo {
	return s.withDO(s.DO.Debug())
}

func (s settingPODo) WithContext(ctx context.Context) ISettingPODo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s settingPODo) ReadDB() ISettingPODo {
	return s.Clauses(dbresolver.Read)
}

func (s settingPODo) WriteDB() ISettingPODo {
	return s.Clauses(dbresolver.Write)
}

func (s settingPODo) Session(config *gorm.Session) ISettingPODo {
	return s.withDO(s.DO.Session(config))
}

func (s settingPODo) Clauses(conds ...clause.Expression) ISettingPODo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s settingPODo) Returning(value interface{}, columns ...string) ISettingPODo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s settingPODo) Not(conds ...gen.Condition) ISettingPODo {
	return s.withDO(s.DO.Not(conds...))
}

func (s settingPODo) Or(conds ...gen.Condition) ISettingPODo {
	return s.withDO(s.DO.Or(conds...))
}

func (s settingPODo) Select(conds ...field.Expr) ISettingPODo {
	return s.withDO(s.DO.Select(conds...))
}

func (s settingPODo) Where(conds ...gen.Condition) ISettingPODo {
	return s.withDO(s.DO.Where(conds...))
}

func (s settingPODo) Order(conds ...field.Expr) ISettingPODo {
	return s.withDO(s.DO.Order(conds...))
}

func (s settingPODo) Distinct(cols ...field.Expr) ISettingPODo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s settingPODo) Omit(cols ...field.Expr) ISettingPODo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s settingPODo) Join(table schema.Tabler, on ...field.Expr) ISettingPODo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s settingPODo) LeftJoin(table schema.Tabler, on ...field.Expr) ISettingPODo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s settingPODo) RightJoin(table schema.Tabler, on ...field.Expr) ISettingPODo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s settingPODo) Group(cols ...field.Expr) ISettingPODo {
	return s.withDO(s.DO.Group(cols...))
}

func (s settingPODo) Having(conds ...gen.Condition) ISettingPODo {
	return s.withDO(s.DO.Having(conds...))
}

func (s settingPODo) Limit(limit int) ISettingPODo {
	return s.withDO(s.DO.Limit(limit))
}

func (s settingPODo) Offset(offset int) ISettingPODo {
	return s.withDO(s.DO.Offset(offset))
}

func (s settingPODo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISettingPODo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s settingPODo) Unscoped() ISettingPODo {
	return s.withDO(s.DO.Unscoped())
}

func (s settingPODo) Create(values ...*po.SettingPO) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s settingPODo) CreateInBatches(values []*po.SettingPO, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s settingPODo) Save(values ...*po.SettingPO) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s settingPODo) First() (*po.SettingPO, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*po.SettingPO), nil
	}
}

func (s settingPODo) Take() (*po.SettingPO, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*po.SettingPO), nil
	}
}

func (s settingPODo) Last() (*po.SettingPO, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*po.SettingPO), nil
	}
}

func (s settingPODo) Find() ([]*po.SettingPO, error) {
	result, err := s.DO.Find()
	return result.([]*po.SettingPO), err
}

func (s settingPODo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*po.SettingPO, err error) {
	buf := make([]*po.SettingPO, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s settingPODo) FindInBatches(result *[]*po.SettingPO, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s settingPODo) Attrs(attrs ...field.AssignExpr) ISettingPODo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s settingPODo) Assign(attrs ...field.AssignExpr) ISettingPODo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s settingPODo) Joins(fields ...field.RelationField) ISettingPODo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s settingPODo) Preload(fields ...field.RelationField) ISettingPODo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s settingPODo) FirstOrInit() (*po.SettingPO, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*po.SettingPO), nil
	}
}

func (s settingPODo) FirstOrCreate() (*po.SettingPO, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*po.SettingPO), nil
	}
}

func (s settingPODo) FindByPage(offset int, limit int) (result []*po.SettingPO, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s settingPODo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s settingPODo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s settingPODo) Delete(models ...*po.SettingPO) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *settingPODo) withDO(do gen.Dao) *settingPODo {
	s.DO = *do.(*gen.DO)
	return s
}
