// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repository

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"jcourse_go/model/po"
)

func newUserPointDetailPO(db *gorm.DB, opts ...gen.DOOption) userPointDetailPO {
	_userPointDetailPO := userPointDetailPO{}

	_userPointDetailPO.userPointDetailPODo.UseDB(db, opts...)
	_userPointDetailPO.userPointDetailPODo.UseModel(&po.UserPointDetailPO{})

	tableName := _userPointDetailPO.userPointDetailPODo.TableName()
	_userPointDetailPO.ALL = field.NewAsterisk(tableName)
	_userPointDetailPO.ID = field.NewInt64(tableName, "id")
	_userPointDetailPO.CreatedAt = field.NewTime(tableName, "created_at")
	_userPointDetailPO.EventType = field.NewString(tableName, "event_type")
	_userPointDetailPO.Description = field.NewString(tableName, "description")
	_userPointDetailPO.Value = field.NewInt64(tableName, "value")
	_userPointDetailPO.UserID = field.NewInt64(tableName, "user_id")
	_userPointDetailPO.User = userPointDetailPOBelongsToUser{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("User", "po.UserPO"),
		UserPointDetails: struct {
			field.RelationField
			User struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("User.UserPointDetails", "po.UserPointDetailPO"),
			User: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("User.UserPointDetails.User", "po.UserPO"),
			},
		},
	}

	_userPointDetailPO.fillFieldMap()

	return _userPointDetailPO
}

type userPointDetailPO struct {
	userPointDetailPODo

	ALL         field.Asterisk
	ID          field.Int64
	CreatedAt   field.Time
	EventType   field.String
	Description field.String
	Value       field.Int64
	UserID      field.Int64
	User        userPointDetailPOBelongsToUser

	fieldMap map[string]field.Expr
}

func (u userPointDetailPO) Table(newTableName string) *userPointDetailPO {
	u.userPointDetailPODo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userPointDetailPO) As(alias string) *userPointDetailPO {
	u.userPointDetailPODo.DO = *(u.userPointDetailPODo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userPointDetailPO) updateTableName(table string) *userPointDetailPO {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.CreatedAt = field.NewTime(table, "created_at")
	u.EventType = field.NewString(table, "event_type")
	u.Description = field.NewString(table, "description")
	u.Value = field.NewInt64(table, "value")
	u.UserID = field.NewInt64(table, "user_id")

	u.fillFieldMap()

	return u
}

func (u *userPointDetailPO) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userPointDetailPO) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 7)
	u.fieldMap["id"] = u.ID
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["event_type"] = u.EventType
	u.fieldMap["description"] = u.Description
	u.fieldMap["value"] = u.Value
	u.fieldMap["user_id"] = u.UserID

}

func (u userPointDetailPO) clone(db *gorm.DB) userPointDetailPO {
	u.userPointDetailPODo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userPointDetailPO) replaceDB(db *gorm.DB) userPointDetailPO {
	u.userPointDetailPODo.ReplaceDB(db)
	return u
}

type userPointDetailPOBelongsToUser struct {
	db *gorm.DB

	field.RelationField

	UserPointDetails struct {
		field.RelationField
		User struct {
			field.RelationField
		}
	}
}

func (a userPointDetailPOBelongsToUser) Where(conds ...field.Expr) *userPointDetailPOBelongsToUser {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a userPointDetailPOBelongsToUser) WithContext(ctx context.Context) *userPointDetailPOBelongsToUser {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a userPointDetailPOBelongsToUser) Session(session *gorm.Session) *userPointDetailPOBelongsToUser {
	a.db = a.db.Session(session)
	return &a
}

func (a userPointDetailPOBelongsToUser) Model(m *po.UserPointDetailPO) *userPointDetailPOBelongsToUserTx {
	return &userPointDetailPOBelongsToUserTx{a.db.Model(m).Association(a.Name())}
}

type userPointDetailPOBelongsToUserTx struct{ tx *gorm.Association }

func (a userPointDetailPOBelongsToUserTx) Find() (result *po.UserPO, err error) {
	return result, a.tx.Find(&result)
}

func (a userPointDetailPOBelongsToUserTx) Append(values ...*po.UserPO) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a userPointDetailPOBelongsToUserTx) Replace(values ...*po.UserPO) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a userPointDetailPOBelongsToUserTx) Delete(values ...*po.UserPO) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a userPointDetailPOBelongsToUserTx) Clear() error {
	return a.tx.Clear()
}

func (a userPointDetailPOBelongsToUserTx) Count() int64 {
	return a.tx.Count()
}

type userPointDetailPODo struct{ gen.DO }

type IUserPointDetailPODo interface {
	gen.SubQuery
	Debug() IUserPointDetailPODo
	WithContext(ctx context.Context) IUserPointDetailPODo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserPointDetailPODo
	WriteDB() IUserPointDetailPODo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserPointDetailPODo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserPointDetailPODo
	Not(conds ...gen.Condition) IUserPointDetailPODo
	Or(conds ...gen.Condition) IUserPointDetailPODo
	Select(conds ...field.Expr) IUserPointDetailPODo
	Where(conds ...gen.Condition) IUserPointDetailPODo
	Order(conds ...field.Expr) IUserPointDetailPODo
	Distinct(cols ...field.Expr) IUserPointDetailPODo
	Omit(cols ...field.Expr) IUserPointDetailPODo
	Join(table schema.Tabler, on ...field.Expr) IUserPointDetailPODo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserPointDetailPODo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserPointDetailPODo
	Group(cols ...field.Expr) IUserPointDetailPODo
	Having(conds ...gen.Condition) IUserPointDetailPODo
	Limit(limit int) IUserPointDetailPODo
	Offset(offset int) IUserPointDetailPODo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserPointDetailPODo
	Unscoped() IUserPointDetailPODo
	Create(values ...*po.UserPointDetailPO) error
	CreateInBatches(values []*po.UserPointDetailPO, batchSize int) error
	Save(values ...*po.UserPointDetailPO) error
	First() (*po.UserPointDetailPO, error)
	Take() (*po.UserPointDetailPO, error)
	Last() (*po.UserPointDetailPO, error)
	Find() ([]*po.UserPointDetailPO, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*po.UserPointDetailPO, err error)
	FindInBatches(result *[]*po.UserPointDetailPO, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*po.UserPointDetailPO) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserPointDetailPODo
	Assign(attrs ...field.AssignExpr) IUserPointDetailPODo
	Joins(fields ...field.RelationField) IUserPointDetailPODo
	Preload(fields ...field.RelationField) IUserPointDetailPODo
	FirstOrInit() (*po.UserPointDetailPO, error)
	FirstOrCreate() (*po.UserPointDetailPO, error)
	FindByPage(offset int, limit int) (result []*po.UserPointDetailPO, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserPointDetailPODo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userPointDetailPODo) Debug() IUserPointDetailPODo {
	return u.withDO(u.DO.Debug())
}

func (u userPointDetailPODo) WithContext(ctx context.Context) IUserPointDetailPODo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userPointDetailPODo) ReadDB() IUserPointDetailPODo {
	return u.Clauses(dbresolver.Read)
}

func (u userPointDetailPODo) WriteDB() IUserPointDetailPODo {
	return u.Clauses(dbresolver.Write)
}

func (u userPointDetailPODo) Session(config *gorm.Session) IUserPointDetailPODo {
	return u.withDO(u.DO.Session(config))
}

func (u userPointDetailPODo) Clauses(conds ...clause.Expression) IUserPointDetailPODo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userPointDetailPODo) Returning(value interface{}, columns ...string) IUserPointDetailPODo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userPointDetailPODo) Not(conds ...gen.Condition) IUserPointDetailPODo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userPointDetailPODo) Or(conds ...gen.Condition) IUserPointDetailPODo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userPointDetailPODo) Select(conds ...field.Expr) IUserPointDetailPODo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userPointDetailPODo) Where(conds ...gen.Condition) IUserPointDetailPODo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userPointDetailPODo) Order(conds ...field.Expr) IUserPointDetailPODo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userPointDetailPODo) Distinct(cols ...field.Expr) IUserPointDetailPODo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userPointDetailPODo) Omit(cols ...field.Expr) IUserPointDetailPODo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userPointDetailPODo) Join(table schema.Tabler, on ...field.Expr) IUserPointDetailPODo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userPointDetailPODo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserPointDetailPODo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userPointDetailPODo) RightJoin(table schema.Tabler, on ...field.Expr) IUserPointDetailPODo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userPointDetailPODo) Group(cols ...field.Expr) IUserPointDetailPODo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userPointDetailPODo) Having(conds ...gen.Condition) IUserPointDetailPODo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userPointDetailPODo) Limit(limit int) IUserPointDetailPODo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userPointDetailPODo) Offset(offset int) IUserPointDetailPODo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userPointDetailPODo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserPointDetailPODo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userPointDetailPODo) Unscoped() IUserPointDetailPODo {
	return u.withDO(u.DO.Unscoped())
}

func (u userPointDetailPODo) Create(values ...*po.UserPointDetailPO) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userPointDetailPODo) CreateInBatches(values []*po.UserPointDetailPO, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userPointDetailPODo) Save(values ...*po.UserPointDetailPO) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userPointDetailPODo) First() (*po.UserPointDetailPO, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*po.UserPointDetailPO), nil
	}
}

func (u userPointDetailPODo) Take() (*po.UserPointDetailPO, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*po.UserPointDetailPO), nil
	}
}

func (u userPointDetailPODo) Last() (*po.UserPointDetailPO, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*po.UserPointDetailPO), nil
	}
}

func (u userPointDetailPODo) Find() ([]*po.UserPointDetailPO, error) {
	result, err := u.DO.Find()
	return result.([]*po.UserPointDetailPO), err
}

func (u userPointDetailPODo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*po.UserPointDetailPO, err error) {
	buf := make([]*po.UserPointDetailPO, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userPointDetailPODo) FindInBatches(result *[]*po.UserPointDetailPO, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userPointDetailPODo) Attrs(attrs ...field.AssignExpr) IUserPointDetailPODo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userPointDetailPODo) Assign(attrs ...field.AssignExpr) IUserPointDetailPODo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userPointDetailPODo) Joins(fields ...field.RelationField) IUserPointDetailPODo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userPointDetailPODo) Preload(fields ...field.RelationField) IUserPointDetailPODo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userPointDetailPODo) FirstOrInit() (*po.UserPointDetailPO, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*po.UserPointDetailPO), nil
	}
}

func (u userPointDetailPODo) FirstOrCreate() (*po.UserPointDetailPO, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*po.UserPointDetailPO), nil
	}
}

func (u userPointDetailPODo) FindByPage(offset int, limit int) (result []*po.UserPointDetailPO, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userPointDetailPODo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userPointDetailPODo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userPointDetailPODo) Delete(models ...*po.UserPointDetailPO) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userPointDetailPODo) withDO(do gen.Dao) *userPointDetailPODo {
	u.DO = *do.(*gen.DO)
	return u
}
