// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repository

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"jcourse_go/model/po"
)

func newBaseCoursePO(db *gorm.DB, opts ...gen.DOOption) baseCoursePO {
	_baseCoursePO := baseCoursePO{}

	_baseCoursePO.baseCoursePODo.UseDB(db, opts...)
	_baseCoursePO.baseCoursePODo.UseModel(&po.BaseCoursePO{})

	tableName := _baseCoursePO.baseCoursePODo.TableName()
	_baseCoursePO.ALL = field.NewAsterisk(tableName)
	_baseCoursePO.ID = field.NewInt64(tableName, "id")
	_baseCoursePO.CreatedAt = field.NewTime(tableName, "created_at")
	_baseCoursePO.Code = field.NewString(tableName, "code")
	_baseCoursePO.Name = field.NewString(tableName, "name")
	_baseCoursePO.Credit = field.NewFloat64(tableName, "credit")

	_baseCoursePO.fillFieldMap()

	return _baseCoursePO
}

type baseCoursePO struct {
	baseCoursePODo

	ALL       field.Asterisk
	ID        field.Int64
	CreatedAt field.Time
	Code      field.String
	Name      field.String
	Credit    field.Float64

	fieldMap map[string]field.Expr
}

func (b baseCoursePO) Table(newTableName string) *baseCoursePO {
	b.baseCoursePODo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b baseCoursePO) As(alias string) *baseCoursePO {
	b.baseCoursePODo.DO = *(b.baseCoursePODo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *baseCoursePO) updateTableName(table string) *baseCoursePO {
	b.ALL = field.NewAsterisk(table)
	b.ID = field.NewInt64(table, "id")
	b.CreatedAt = field.NewTime(table, "created_at")
	b.Code = field.NewString(table, "code")
	b.Name = field.NewString(table, "name")
	b.Credit = field.NewFloat64(table, "credit")

	b.fillFieldMap()

	return b
}

func (b *baseCoursePO) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *baseCoursePO) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 5)
	b.fieldMap["id"] = b.ID
	b.fieldMap["created_at"] = b.CreatedAt
	b.fieldMap["code"] = b.Code
	b.fieldMap["name"] = b.Name
	b.fieldMap["credit"] = b.Credit
}

func (b baseCoursePO) clone(db *gorm.DB) baseCoursePO {
	b.baseCoursePODo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b baseCoursePO) replaceDB(db *gorm.DB) baseCoursePO {
	b.baseCoursePODo.ReplaceDB(db)
	return b
}

type baseCoursePODo struct{ gen.DO }

type IBaseCoursePODo interface {
	gen.SubQuery
	Debug() IBaseCoursePODo
	WithContext(ctx context.Context) IBaseCoursePODo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IBaseCoursePODo
	WriteDB() IBaseCoursePODo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IBaseCoursePODo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IBaseCoursePODo
	Not(conds ...gen.Condition) IBaseCoursePODo
	Or(conds ...gen.Condition) IBaseCoursePODo
	Select(conds ...field.Expr) IBaseCoursePODo
	Where(conds ...gen.Condition) IBaseCoursePODo
	Order(conds ...field.Expr) IBaseCoursePODo
	Distinct(cols ...field.Expr) IBaseCoursePODo
	Omit(cols ...field.Expr) IBaseCoursePODo
	Join(table schema.Tabler, on ...field.Expr) IBaseCoursePODo
	LeftJoin(table schema.Tabler, on ...field.Expr) IBaseCoursePODo
	RightJoin(table schema.Tabler, on ...field.Expr) IBaseCoursePODo
	Group(cols ...field.Expr) IBaseCoursePODo
	Having(conds ...gen.Condition) IBaseCoursePODo
	Limit(limit int) IBaseCoursePODo
	Offset(offset int) IBaseCoursePODo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IBaseCoursePODo
	Unscoped() IBaseCoursePODo
	Create(values ...*po.BaseCoursePO) error
	CreateInBatches(values []*po.BaseCoursePO, batchSize int) error
	Save(values ...*po.BaseCoursePO) error
	First() (*po.BaseCoursePO, error)
	Take() (*po.BaseCoursePO, error)
	Last() (*po.BaseCoursePO, error)
	Find() ([]*po.BaseCoursePO, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*po.BaseCoursePO, err error)
	FindInBatches(result *[]*po.BaseCoursePO, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*po.BaseCoursePO) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IBaseCoursePODo
	Assign(attrs ...field.AssignExpr) IBaseCoursePODo
	Joins(fields ...field.RelationField) IBaseCoursePODo
	Preload(fields ...field.RelationField) IBaseCoursePODo
	FirstOrInit() (*po.BaseCoursePO, error)
	FirstOrCreate() (*po.BaseCoursePO, error)
	FindByPage(offset int, limit int) (result []*po.BaseCoursePO, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IBaseCoursePODo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (b baseCoursePODo) Debug() IBaseCoursePODo {
	return b.withDO(b.DO.Debug())
}

func (b baseCoursePODo) WithContext(ctx context.Context) IBaseCoursePODo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b baseCoursePODo) ReadDB() IBaseCoursePODo {
	return b.Clauses(dbresolver.Read)
}

func (b baseCoursePODo) WriteDB() IBaseCoursePODo {
	return b.Clauses(dbresolver.Write)
}

func (b baseCoursePODo) Session(config *gorm.Session) IBaseCoursePODo {
	return b.withDO(b.DO.Session(config))
}

func (b baseCoursePODo) Clauses(conds ...clause.Expression) IBaseCoursePODo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b baseCoursePODo) Returning(value interface{}, columns ...string) IBaseCoursePODo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b baseCoursePODo) Not(conds ...gen.Condition) IBaseCoursePODo {
	return b.withDO(b.DO.Not(conds...))
}

func (b baseCoursePODo) Or(conds ...gen.Condition) IBaseCoursePODo {
	return b.withDO(b.DO.Or(conds...))
}

func (b baseCoursePODo) Select(conds ...field.Expr) IBaseCoursePODo {
	return b.withDO(b.DO.Select(conds...))
}

func (b baseCoursePODo) Where(conds ...gen.Condition) IBaseCoursePODo {
	return b.withDO(b.DO.Where(conds...))
}

func (b baseCoursePODo) Order(conds ...field.Expr) IBaseCoursePODo {
	return b.withDO(b.DO.Order(conds...))
}

func (b baseCoursePODo) Distinct(cols ...field.Expr) IBaseCoursePODo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b baseCoursePODo) Omit(cols ...field.Expr) IBaseCoursePODo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b baseCoursePODo) Join(table schema.Tabler, on ...field.Expr) IBaseCoursePODo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b baseCoursePODo) LeftJoin(table schema.Tabler, on ...field.Expr) IBaseCoursePODo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b baseCoursePODo) RightJoin(table schema.Tabler, on ...field.Expr) IBaseCoursePODo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b baseCoursePODo) Group(cols ...field.Expr) IBaseCoursePODo {
	return b.withDO(b.DO.Group(cols...))
}

func (b baseCoursePODo) Having(conds ...gen.Condition) IBaseCoursePODo {
	return b.withDO(b.DO.Having(conds...))
}

func (b baseCoursePODo) Limit(limit int) IBaseCoursePODo {
	return b.withDO(b.DO.Limit(limit))
}

func (b baseCoursePODo) Offset(offset int) IBaseCoursePODo {
	return b.withDO(b.DO.Offset(offset))
}

func (b baseCoursePODo) Scopes(funcs ...func(gen.Dao) gen.Dao) IBaseCoursePODo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b baseCoursePODo) Unscoped() IBaseCoursePODo {
	return b.withDO(b.DO.Unscoped())
}

func (b baseCoursePODo) Create(values ...*po.BaseCoursePO) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b baseCoursePODo) CreateInBatches(values []*po.BaseCoursePO, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b baseCoursePODo) Save(values ...*po.BaseCoursePO) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b baseCoursePODo) First() (*po.BaseCoursePO, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*po.BaseCoursePO), nil
	}
}

func (b baseCoursePODo) Take() (*po.BaseCoursePO, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*po.BaseCoursePO), nil
	}
}

func (b baseCoursePODo) Last() (*po.BaseCoursePO, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*po.BaseCoursePO), nil
	}
}

func (b baseCoursePODo) Find() ([]*po.BaseCoursePO, error) {
	result, err := b.DO.Find()
	return result.([]*po.BaseCoursePO), err
}

func (b baseCoursePODo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*po.BaseCoursePO, err error) {
	buf := make([]*po.BaseCoursePO, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b baseCoursePODo) FindInBatches(result *[]*po.BaseCoursePO, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b baseCoursePODo) Attrs(attrs ...field.AssignExpr) IBaseCoursePODo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b baseCoursePODo) Assign(attrs ...field.AssignExpr) IBaseCoursePODo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b baseCoursePODo) Joins(fields ...field.RelationField) IBaseCoursePODo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b baseCoursePODo) Preload(fields ...field.RelationField) IBaseCoursePODo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b baseCoursePODo) FirstOrInit() (*po.BaseCoursePO, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*po.BaseCoursePO), nil
	}
}

func (b baseCoursePODo) FirstOrCreate() (*po.BaseCoursePO, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*po.BaseCoursePO), nil
	}
}

func (b baseCoursePODo) FindByPage(offset int, limit int) (result []*po.BaseCoursePO, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b baseCoursePODo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b baseCoursePODo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b baseCoursePODo) Delete(models ...*po.BaseCoursePO) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *baseCoursePODo) withDO(do gen.Dao) *baseCoursePODo {
	b.DO = *do.(*gen.DO)
	return b
}
