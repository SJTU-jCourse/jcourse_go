// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repository

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"jcourse_go/model/po"
)

func newCourseCategoryPO(db *gorm.DB, opts ...gen.DOOption) courseCategoryPO {
	_courseCategoryPO := courseCategoryPO{}

	_courseCategoryPO.courseCategoryPODo.UseDB(db, opts...)
	_courseCategoryPO.courseCategoryPODo.UseModel(&po.CourseCategoryPO{})

	tableName := _courseCategoryPO.courseCategoryPODo.TableName()
	_courseCategoryPO.ALL = field.NewAsterisk(tableName)
	_courseCategoryPO.ID = field.NewInt64(tableName, "id")
	_courseCategoryPO.CreatedAt = field.NewTime(tableName, "created_at")
	_courseCategoryPO.CourseID = field.NewInt64(tableName, "course_id")
	_courseCategoryPO.Category = field.NewString(tableName, "category")
	_courseCategoryPO.Course = courseCategoryPOBelongsToCourse{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Course", "po.CoursePO"),
		MainTeacher: struct {
			field.RelationField
			Courses struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Course.MainTeacher", "po.TeacherPO"),
			Courses: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Course.MainTeacher.Courses", "po.CoursePO"),
			},
		},
		Categories: struct {
			field.RelationField
			Course struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Course.Categories", "po.CourseCategoryPO"),
			Course: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Course.Categories.Course", "po.CoursePO"),
			},
		},
		OfferedCourses: struct {
			field.RelationField
			Course struct {
				field.RelationField
			}
			MainTeacher struct {
				field.RelationField
			}
			OfferedCourseTeacher struct {
				field.RelationField
				Course struct {
					field.RelationField
				}
				OfferedCourse struct {
					field.RelationField
				}
				MainTeacher struct {
					field.RelationField
				}
				Teacher struct {
					field.RelationField
				}
			}
		}{
			RelationField: field.NewRelation("Course.OfferedCourses", "po.OfferedCoursePO"),
			Course: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Course.OfferedCourses.Course", "po.CoursePO"),
			},
			MainTeacher: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Course.OfferedCourses.MainTeacher", "po.TeacherPO"),
			},
			OfferedCourseTeacher: struct {
				field.RelationField
				Course struct {
					field.RelationField
				}
				OfferedCourse struct {
					field.RelationField
				}
				MainTeacher struct {
					field.RelationField
				}
				Teacher struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Course.OfferedCourses.OfferedCourseTeacher", "po.OfferedCourseTeacherPO"),
				Course: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Course.OfferedCourses.OfferedCourseTeacher.Course", "po.CoursePO"),
				},
				OfferedCourse: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Course.OfferedCourses.OfferedCourseTeacher.OfferedCourse", "po.OfferedCoursePO"),
				},
				MainTeacher: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Course.OfferedCourses.OfferedCourseTeacher.MainTeacher", "po.TeacherPO"),
				},
				Teacher: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Course.OfferedCourses.OfferedCourseTeacher.Teacher", "po.TeacherPO"),
				},
			},
		},
	}

	_courseCategoryPO.fillFieldMap()

	return _courseCategoryPO
}

type courseCategoryPO struct {
	courseCategoryPODo

	ALL       field.Asterisk
	ID        field.Int64
	CreatedAt field.Time
	CourseID  field.Int64
	Category  field.String
	Course    courseCategoryPOBelongsToCourse

	fieldMap map[string]field.Expr
}

func (c courseCategoryPO) Table(newTableName string) *courseCategoryPO {
	c.courseCategoryPODo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c courseCategoryPO) As(alias string) *courseCategoryPO {
	c.courseCategoryPODo.DO = *(c.courseCategoryPODo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *courseCategoryPO) updateTableName(table string) *courseCategoryPO {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.CourseID = field.NewInt64(table, "course_id")
	c.Category = field.NewString(table, "category")

	c.fillFieldMap()

	return c
}

func (c *courseCategoryPO) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *courseCategoryPO) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 5)
	c.fieldMap["id"] = c.ID
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["course_id"] = c.CourseID
	c.fieldMap["category"] = c.Category

}

func (c courseCategoryPO) clone(db *gorm.DB) courseCategoryPO {
	c.courseCategoryPODo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c courseCategoryPO) replaceDB(db *gorm.DB) courseCategoryPO {
	c.courseCategoryPODo.ReplaceDB(db)
	return c
}

type courseCategoryPOBelongsToCourse struct {
	db *gorm.DB

	field.RelationField

	MainTeacher struct {
		field.RelationField
		Courses struct {
			field.RelationField
		}
	}
	Categories struct {
		field.RelationField
		Course struct {
			field.RelationField
		}
	}
	OfferedCourses struct {
		field.RelationField
		Course struct {
			field.RelationField
		}
		MainTeacher struct {
			field.RelationField
		}
		OfferedCourseTeacher struct {
			field.RelationField
			Course struct {
				field.RelationField
			}
			OfferedCourse struct {
				field.RelationField
			}
			MainTeacher struct {
				field.RelationField
			}
			Teacher struct {
				field.RelationField
			}
		}
	}
}

func (a courseCategoryPOBelongsToCourse) Where(conds ...field.Expr) *courseCategoryPOBelongsToCourse {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a courseCategoryPOBelongsToCourse) WithContext(ctx context.Context) *courseCategoryPOBelongsToCourse {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a courseCategoryPOBelongsToCourse) Session(session *gorm.Session) *courseCategoryPOBelongsToCourse {
	a.db = a.db.Session(session)
	return &a
}

func (a courseCategoryPOBelongsToCourse) Model(m *po.CourseCategoryPO) *courseCategoryPOBelongsToCourseTx {
	return &courseCategoryPOBelongsToCourseTx{a.db.Model(m).Association(a.Name())}
}

type courseCategoryPOBelongsToCourseTx struct{ tx *gorm.Association }

func (a courseCategoryPOBelongsToCourseTx) Find() (result *po.CoursePO, err error) {
	return result, a.tx.Find(&result)
}

func (a courseCategoryPOBelongsToCourseTx) Append(values ...*po.CoursePO) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a courseCategoryPOBelongsToCourseTx) Replace(values ...*po.CoursePO) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a courseCategoryPOBelongsToCourseTx) Delete(values ...*po.CoursePO) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a courseCategoryPOBelongsToCourseTx) Clear() error {
	return a.tx.Clear()
}

func (a courseCategoryPOBelongsToCourseTx) Count() int64 {
	return a.tx.Count()
}

type courseCategoryPODo struct{ gen.DO }

type ICourseCategoryPODo interface {
	gen.SubQuery
	Debug() ICourseCategoryPODo
	WithContext(ctx context.Context) ICourseCategoryPODo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICourseCategoryPODo
	WriteDB() ICourseCategoryPODo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICourseCategoryPODo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICourseCategoryPODo
	Not(conds ...gen.Condition) ICourseCategoryPODo
	Or(conds ...gen.Condition) ICourseCategoryPODo
	Select(conds ...field.Expr) ICourseCategoryPODo
	Where(conds ...gen.Condition) ICourseCategoryPODo
	Order(conds ...field.Expr) ICourseCategoryPODo
	Distinct(cols ...field.Expr) ICourseCategoryPODo
	Omit(cols ...field.Expr) ICourseCategoryPODo
	Join(table schema.Tabler, on ...field.Expr) ICourseCategoryPODo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICourseCategoryPODo
	RightJoin(table schema.Tabler, on ...field.Expr) ICourseCategoryPODo
	Group(cols ...field.Expr) ICourseCategoryPODo
	Having(conds ...gen.Condition) ICourseCategoryPODo
	Limit(limit int) ICourseCategoryPODo
	Offset(offset int) ICourseCategoryPODo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICourseCategoryPODo
	Unscoped() ICourseCategoryPODo
	Create(values ...*po.CourseCategoryPO) error
	CreateInBatches(values []*po.CourseCategoryPO, batchSize int) error
	Save(values ...*po.CourseCategoryPO) error
	First() (*po.CourseCategoryPO, error)
	Take() (*po.CourseCategoryPO, error)
	Last() (*po.CourseCategoryPO, error)
	Find() ([]*po.CourseCategoryPO, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*po.CourseCategoryPO, err error)
	FindInBatches(result *[]*po.CourseCategoryPO, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*po.CourseCategoryPO) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICourseCategoryPODo
	Assign(attrs ...field.AssignExpr) ICourseCategoryPODo
	Joins(fields ...field.RelationField) ICourseCategoryPODo
	Preload(fields ...field.RelationField) ICourseCategoryPODo
	FirstOrInit() (*po.CourseCategoryPO, error)
	FirstOrCreate() (*po.CourseCategoryPO, error)
	FindByPage(offset int, limit int) (result []*po.CourseCategoryPO, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICourseCategoryPODo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c courseCategoryPODo) Debug() ICourseCategoryPODo {
	return c.withDO(c.DO.Debug())
}

func (c courseCategoryPODo) WithContext(ctx context.Context) ICourseCategoryPODo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c courseCategoryPODo) ReadDB() ICourseCategoryPODo {
	return c.Clauses(dbresolver.Read)
}

func (c courseCategoryPODo) WriteDB() ICourseCategoryPODo {
	return c.Clauses(dbresolver.Write)
}

func (c courseCategoryPODo) Session(config *gorm.Session) ICourseCategoryPODo {
	return c.withDO(c.DO.Session(config))
}

func (c courseCategoryPODo) Clauses(conds ...clause.Expression) ICourseCategoryPODo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c courseCategoryPODo) Returning(value interface{}, columns ...string) ICourseCategoryPODo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c courseCategoryPODo) Not(conds ...gen.Condition) ICourseCategoryPODo {
	return c.withDO(c.DO.Not(conds...))
}

func (c courseCategoryPODo) Or(conds ...gen.Condition) ICourseCategoryPODo {
	return c.withDO(c.DO.Or(conds...))
}

func (c courseCategoryPODo) Select(conds ...field.Expr) ICourseCategoryPODo {
	return c.withDO(c.DO.Select(conds...))
}

func (c courseCategoryPODo) Where(conds ...gen.Condition) ICourseCategoryPODo {
	return c.withDO(c.DO.Where(conds...))
}

func (c courseCategoryPODo) Order(conds ...field.Expr) ICourseCategoryPODo {
	return c.withDO(c.DO.Order(conds...))
}

func (c courseCategoryPODo) Distinct(cols ...field.Expr) ICourseCategoryPODo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c courseCategoryPODo) Omit(cols ...field.Expr) ICourseCategoryPODo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c courseCategoryPODo) Join(table schema.Tabler, on ...field.Expr) ICourseCategoryPODo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c courseCategoryPODo) LeftJoin(table schema.Tabler, on ...field.Expr) ICourseCategoryPODo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c courseCategoryPODo) RightJoin(table schema.Tabler, on ...field.Expr) ICourseCategoryPODo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c courseCategoryPODo) Group(cols ...field.Expr) ICourseCategoryPODo {
	return c.withDO(c.DO.Group(cols...))
}

func (c courseCategoryPODo) Having(conds ...gen.Condition) ICourseCategoryPODo {
	return c.withDO(c.DO.Having(conds...))
}

func (c courseCategoryPODo) Limit(limit int) ICourseCategoryPODo {
	return c.withDO(c.DO.Limit(limit))
}

func (c courseCategoryPODo) Offset(offset int) ICourseCategoryPODo {
	return c.withDO(c.DO.Offset(offset))
}

func (c courseCategoryPODo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICourseCategoryPODo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c courseCategoryPODo) Unscoped() ICourseCategoryPODo {
	return c.withDO(c.DO.Unscoped())
}

func (c courseCategoryPODo) Create(values ...*po.CourseCategoryPO) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c courseCategoryPODo) CreateInBatches(values []*po.CourseCategoryPO, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c courseCategoryPODo) Save(values ...*po.CourseCategoryPO) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c courseCategoryPODo) First() (*po.CourseCategoryPO, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*po.CourseCategoryPO), nil
	}
}

func (c courseCategoryPODo) Take() (*po.CourseCategoryPO, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*po.CourseCategoryPO), nil
	}
}

func (c courseCategoryPODo) Last() (*po.CourseCategoryPO, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*po.CourseCategoryPO), nil
	}
}

func (c courseCategoryPODo) Find() ([]*po.CourseCategoryPO, error) {
	result, err := c.DO.Find()
	return result.([]*po.CourseCategoryPO), err
}

func (c courseCategoryPODo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*po.CourseCategoryPO, err error) {
	buf := make([]*po.CourseCategoryPO, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c courseCategoryPODo) FindInBatches(result *[]*po.CourseCategoryPO, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c courseCategoryPODo) Attrs(attrs ...field.AssignExpr) ICourseCategoryPODo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c courseCategoryPODo) Assign(attrs ...field.AssignExpr) ICourseCategoryPODo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c courseCategoryPODo) Joins(fields ...field.RelationField) ICourseCategoryPODo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c courseCategoryPODo) Preload(fields ...field.RelationField) ICourseCategoryPODo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c courseCategoryPODo) FirstOrInit() (*po.CourseCategoryPO, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*po.CourseCategoryPO), nil
	}
}

func (c courseCategoryPODo) FirstOrCreate() (*po.CourseCategoryPO, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*po.CourseCategoryPO), nil
	}
}

func (c courseCategoryPODo) FindByPage(offset int, limit int) (result []*po.CourseCategoryPO, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c courseCategoryPODo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c courseCategoryPODo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c courseCategoryPODo) Delete(models ...*po.CourseCategoryPO) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *courseCategoryPODo) withDO(do gen.Dao) *courseCategoryPODo {
	c.DO = *do.(*gen.DO)
	return c
}
