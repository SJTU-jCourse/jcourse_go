// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repository

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"jcourse_go/model/po"
)

func newReviewPO(db *gorm.DB, opts ...gen.DOOption) reviewPO {
	_reviewPO := reviewPO{}

	_reviewPO.reviewPODo.UseDB(db, opts...)
	_reviewPO.reviewPODo.UseModel(&po.ReviewPO{})

	tableName := _reviewPO.reviewPODo.TableName()
	_reviewPO.ALL = field.NewAsterisk(tableName)
	_reviewPO.ID = field.NewInt64(tableName, "id")
	_reviewPO.CreatedAt = field.NewTime(tableName, "created_at")
	_reviewPO.UpdatedAt = field.NewTime(tableName, "updated_at")
	_reviewPO.CourseID = field.NewInt64(tableName, "course_id")
	_reviewPO.UserID = field.NewInt64(tableName, "user_id")
	_reviewPO.Comment = field.NewString(tableName, "comment")
	_reviewPO.Rating = field.NewInt64(tableName, "rating")
	_reviewPO.Semester = field.NewString(tableName, "semester")
	_reviewPO.IsAnonymous = field.NewBool(tableName, "is_anonymous")
	_reviewPO.Grade = field.NewString(tableName, "grade")
	_reviewPO.SearchIndex = field.NewField(tableName, "search_index")
	_reviewPO.Revisions = reviewPOHasManyRevisions{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Revisions", "po.ReviewRevisionPO"),
		Review: struct {
			field.RelationField
			Course struct {
				field.RelationField
				MainTeacher struct {
					field.RelationField
					Courses struct {
						field.RelationField
					}
				}
				Categories struct {
					field.RelationField
					Course struct {
						field.RelationField
					}
				}
				OfferedCourses struct {
					field.RelationField
					Course struct {
						field.RelationField
					}
					MainTeacher struct {
						field.RelationField
					}
					OfferedCourseTeacher struct {
						field.RelationField
						Course struct {
							field.RelationField
						}
						OfferedCourse struct {
							field.RelationField
						}
						MainTeacher struct {
							field.RelationField
						}
						Teacher struct {
							field.RelationField
						}
					}
				}
			}
			User struct {
				field.RelationField
				UserPointDetails struct {
					field.RelationField
					User struct {
						field.RelationField
					}
				}
			}
			Revisions struct {
				field.RelationField
			}
			Reaction struct {
				field.RelationField
				Review struct {
					field.RelationField
				}
				User struct {
					field.RelationField
				}
			}
		}{
			RelationField: field.NewRelation("Revisions.Review", "po.ReviewPO"),
			Course: struct {
				field.RelationField
				MainTeacher struct {
					field.RelationField
					Courses struct {
						field.RelationField
					}
				}
				Categories struct {
					field.RelationField
					Course struct {
						field.RelationField
					}
				}
				OfferedCourses struct {
					field.RelationField
					Course struct {
						field.RelationField
					}
					MainTeacher struct {
						field.RelationField
					}
					OfferedCourseTeacher struct {
						field.RelationField
						Course struct {
							field.RelationField
						}
						OfferedCourse struct {
							field.RelationField
						}
						MainTeacher struct {
							field.RelationField
						}
						Teacher struct {
							field.RelationField
						}
					}
				}
			}{
				RelationField: field.NewRelation("Revisions.Review.Course", "po.CoursePO"),
				MainTeacher: struct {
					field.RelationField
					Courses struct {
						field.RelationField
					}
				}{
					RelationField: field.NewRelation("Revisions.Review.Course.MainTeacher", "po.TeacherPO"),
					Courses: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("Revisions.Review.Course.MainTeacher.Courses", "po.CoursePO"),
					},
				},
				Categories: struct {
					field.RelationField
					Course struct {
						field.RelationField
					}
				}{
					RelationField: field.NewRelation("Revisions.Review.Course.Categories", "po.CourseCategoryPO"),
					Course: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("Revisions.Review.Course.Categories.Course", "po.CoursePO"),
					},
				},
				OfferedCourses: struct {
					field.RelationField
					Course struct {
						field.RelationField
					}
					MainTeacher struct {
						field.RelationField
					}
					OfferedCourseTeacher struct {
						field.RelationField
						Course struct {
							field.RelationField
						}
						OfferedCourse struct {
							field.RelationField
						}
						MainTeacher struct {
							field.RelationField
						}
						Teacher struct {
							field.RelationField
						}
					}
				}{
					RelationField: field.NewRelation("Revisions.Review.Course.OfferedCourses", "po.OfferedCoursePO"),
					Course: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("Revisions.Review.Course.OfferedCourses.Course", "po.CoursePO"),
					},
					MainTeacher: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("Revisions.Review.Course.OfferedCourses.MainTeacher", "po.TeacherPO"),
					},
					OfferedCourseTeacher: struct {
						field.RelationField
						Course struct {
							field.RelationField
						}
						OfferedCourse struct {
							field.RelationField
						}
						MainTeacher struct {
							field.RelationField
						}
						Teacher struct {
							field.RelationField
						}
					}{
						RelationField: field.NewRelation("Revisions.Review.Course.OfferedCourses.OfferedCourseTeacher", "po.OfferedCourseTeacherPO"),
						Course: struct {
							field.RelationField
						}{
							RelationField: field.NewRelation("Revisions.Review.Course.OfferedCourses.OfferedCourseTeacher.Course", "po.CoursePO"),
						},
						OfferedCourse: struct {
							field.RelationField
						}{
							RelationField: field.NewRelation("Revisions.Review.Course.OfferedCourses.OfferedCourseTeacher.OfferedCourse", "po.OfferedCoursePO"),
						},
						MainTeacher: struct {
							field.RelationField
						}{
							RelationField: field.NewRelation("Revisions.Review.Course.OfferedCourses.OfferedCourseTeacher.MainTeacher", "po.TeacherPO"),
						},
						Teacher: struct {
							field.RelationField
						}{
							RelationField: field.NewRelation("Revisions.Review.Course.OfferedCourses.OfferedCourseTeacher.Teacher", "po.TeacherPO"),
						},
					},
				},
			},
			User: struct {
				field.RelationField
				UserPointDetails struct {
					field.RelationField
					User struct {
						field.RelationField
					}
				}
			}{
				RelationField: field.NewRelation("Revisions.Review.User", "po.UserPO"),
				UserPointDetails: struct {
					field.RelationField
					User struct {
						field.RelationField
					}
				}{
					RelationField: field.NewRelation("Revisions.Review.User.UserPointDetails", "po.UserPointDetailPO"),
					User: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("Revisions.Review.User.UserPointDetails.User", "po.UserPO"),
					},
				},
			},
			Revisions: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Revisions.Review.Revisions", "po.ReviewRevisionPO"),
			},
			Reaction: struct {
				field.RelationField
				Review struct {
					field.RelationField
				}
				User struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Revisions.Review.Reaction", "po.ReviewReactionPO"),
				Review: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Revisions.Review.Reaction.Review", "po.ReviewPO"),
				},
				User: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Revisions.Review.Reaction.User", "po.UserPO"),
				},
			},
		},
		User: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Revisions.User", "po.UserPO"),
		},
	}

	_reviewPO.Reaction = reviewPOHasManyReaction{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Reaction", "po.ReviewReactionPO"),
	}

	_reviewPO.Course = reviewPOBelongsToCourse{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Course", "po.CoursePO"),
	}

	_reviewPO.User = reviewPOBelongsToUser{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("User", "po.UserPO"),
	}

	_reviewPO.fillFieldMap()

	return _reviewPO
}

type reviewPO struct {
	reviewPODo

	ALL         field.Asterisk
	ID          field.Int64
	CreatedAt   field.Time
	UpdatedAt   field.Time
	CourseID    field.Int64
	UserID      field.Int64
	Comment     field.String
	Rating      field.Int64
	Semester    field.String
	IsAnonymous field.Bool
	Grade       field.String
	SearchIndex field.Field
	Revisions   reviewPOHasManyRevisions

	Reaction reviewPOHasManyReaction

	Course reviewPOBelongsToCourse

	User reviewPOBelongsToUser

	fieldMap map[string]field.Expr
}

func (r reviewPO) Table(newTableName string) *reviewPO {
	r.reviewPODo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r reviewPO) As(alias string) *reviewPO {
	r.reviewPODo.DO = *(r.reviewPODo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *reviewPO) updateTableName(table string) *reviewPO {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewInt64(table, "id")
	r.CreatedAt = field.NewTime(table, "created_at")
	r.UpdatedAt = field.NewTime(table, "updated_at")
	r.CourseID = field.NewInt64(table, "course_id")
	r.UserID = field.NewInt64(table, "user_id")
	r.Comment = field.NewString(table, "comment")
	r.Rating = field.NewInt64(table, "rating")
	r.Semester = field.NewString(table, "semester")
	r.IsAnonymous = field.NewBool(table, "is_anonymous")
	r.Grade = field.NewString(table, "grade")
	r.SearchIndex = field.NewField(table, "search_index")

	r.fillFieldMap()

	return r
}

func (r *reviewPO) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *reviewPO) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 15)
	r.fieldMap["id"] = r.ID
	r.fieldMap["created_at"] = r.CreatedAt
	r.fieldMap["updated_at"] = r.UpdatedAt
	r.fieldMap["course_id"] = r.CourseID
	r.fieldMap["user_id"] = r.UserID
	r.fieldMap["comment"] = r.Comment
	r.fieldMap["rating"] = r.Rating
	r.fieldMap["semester"] = r.Semester
	r.fieldMap["is_anonymous"] = r.IsAnonymous
	r.fieldMap["grade"] = r.Grade
	r.fieldMap["search_index"] = r.SearchIndex

}

func (r reviewPO) clone(db *gorm.DB) reviewPO {
	r.reviewPODo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r reviewPO) replaceDB(db *gorm.DB) reviewPO {
	r.reviewPODo.ReplaceDB(db)
	return r
}

type reviewPOHasManyRevisions struct {
	db *gorm.DB

	field.RelationField

	Review struct {
		field.RelationField
		Course struct {
			field.RelationField
			MainTeacher struct {
				field.RelationField
				Courses struct {
					field.RelationField
				}
			}
			Categories struct {
				field.RelationField
				Course struct {
					field.RelationField
				}
			}
			OfferedCourses struct {
				field.RelationField
				Course struct {
					field.RelationField
				}
				MainTeacher struct {
					field.RelationField
				}
				OfferedCourseTeacher struct {
					field.RelationField
					Course struct {
						field.RelationField
					}
					OfferedCourse struct {
						field.RelationField
					}
					MainTeacher struct {
						field.RelationField
					}
					Teacher struct {
						field.RelationField
					}
				}
			}
		}
		User struct {
			field.RelationField
			UserPointDetails struct {
				field.RelationField
				User struct {
					field.RelationField
				}
			}
		}
		Revisions struct {
			field.RelationField
		}
		Reaction struct {
			field.RelationField
			Review struct {
				field.RelationField
			}
			User struct {
				field.RelationField
			}
		}
	}
	User struct {
		field.RelationField
	}
}

func (a reviewPOHasManyRevisions) Where(conds ...field.Expr) *reviewPOHasManyRevisions {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a reviewPOHasManyRevisions) WithContext(ctx context.Context) *reviewPOHasManyRevisions {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a reviewPOHasManyRevisions) Session(session *gorm.Session) *reviewPOHasManyRevisions {
	a.db = a.db.Session(session)
	return &a
}

func (a reviewPOHasManyRevisions) Model(m *po.ReviewPO) *reviewPOHasManyRevisionsTx {
	return &reviewPOHasManyRevisionsTx{a.db.Model(m).Association(a.Name())}
}

type reviewPOHasManyRevisionsTx struct{ tx *gorm.Association }

func (a reviewPOHasManyRevisionsTx) Find() (result []*po.ReviewRevisionPO, err error) {
	return result, a.tx.Find(&result)
}

func (a reviewPOHasManyRevisionsTx) Append(values ...*po.ReviewRevisionPO) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a reviewPOHasManyRevisionsTx) Replace(values ...*po.ReviewRevisionPO) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a reviewPOHasManyRevisionsTx) Delete(values ...*po.ReviewRevisionPO) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a reviewPOHasManyRevisionsTx) Clear() error {
	return a.tx.Clear()
}

func (a reviewPOHasManyRevisionsTx) Count() int64 {
	return a.tx.Count()
}

type reviewPOHasManyReaction struct {
	db *gorm.DB

	field.RelationField
}

func (a reviewPOHasManyReaction) Where(conds ...field.Expr) *reviewPOHasManyReaction {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a reviewPOHasManyReaction) WithContext(ctx context.Context) *reviewPOHasManyReaction {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a reviewPOHasManyReaction) Session(session *gorm.Session) *reviewPOHasManyReaction {
	a.db = a.db.Session(session)
	return &a
}

func (a reviewPOHasManyReaction) Model(m *po.ReviewPO) *reviewPOHasManyReactionTx {
	return &reviewPOHasManyReactionTx{a.db.Model(m).Association(a.Name())}
}

type reviewPOHasManyReactionTx struct{ tx *gorm.Association }

func (a reviewPOHasManyReactionTx) Find() (result []*po.ReviewReactionPO, err error) {
	return result, a.tx.Find(&result)
}

func (a reviewPOHasManyReactionTx) Append(values ...*po.ReviewReactionPO) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a reviewPOHasManyReactionTx) Replace(values ...*po.ReviewReactionPO) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a reviewPOHasManyReactionTx) Delete(values ...*po.ReviewReactionPO) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a reviewPOHasManyReactionTx) Clear() error {
	return a.tx.Clear()
}

func (a reviewPOHasManyReactionTx) Count() int64 {
	return a.tx.Count()
}

type reviewPOBelongsToCourse struct {
	db *gorm.DB

	field.RelationField
}

func (a reviewPOBelongsToCourse) Where(conds ...field.Expr) *reviewPOBelongsToCourse {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a reviewPOBelongsToCourse) WithContext(ctx context.Context) *reviewPOBelongsToCourse {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a reviewPOBelongsToCourse) Session(session *gorm.Session) *reviewPOBelongsToCourse {
	a.db = a.db.Session(session)
	return &a
}

func (a reviewPOBelongsToCourse) Model(m *po.ReviewPO) *reviewPOBelongsToCourseTx {
	return &reviewPOBelongsToCourseTx{a.db.Model(m).Association(a.Name())}
}

type reviewPOBelongsToCourseTx struct{ tx *gorm.Association }

func (a reviewPOBelongsToCourseTx) Find() (result *po.CoursePO, err error) {
	return result, a.tx.Find(&result)
}

func (a reviewPOBelongsToCourseTx) Append(values ...*po.CoursePO) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a reviewPOBelongsToCourseTx) Replace(values ...*po.CoursePO) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a reviewPOBelongsToCourseTx) Delete(values ...*po.CoursePO) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a reviewPOBelongsToCourseTx) Clear() error {
	return a.tx.Clear()
}

func (a reviewPOBelongsToCourseTx) Count() int64 {
	return a.tx.Count()
}

type reviewPOBelongsToUser struct {
	db *gorm.DB

	field.RelationField
}

func (a reviewPOBelongsToUser) Where(conds ...field.Expr) *reviewPOBelongsToUser {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a reviewPOBelongsToUser) WithContext(ctx context.Context) *reviewPOBelongsToUser {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a reviewPOBelongsToUser) Session(session *gorm.Session) *reviewPOBelongsToUser {
	a.db = a.db.Session(session)
	return &a
}

func (a reviewPOBelongsToUser) Model(m *po.ReviewPO) *reviewPOBelongsToUserTx {
	return &reviewPOBelongsToUserTx{a.db.Model(m).Association(a.Name())}
}

type reviewPOBelongsToUserTx struct{ tx *gorm.Association }

func (a reviewPOBelongsToUserTx) Find() (result *po.UserPO, err error) {
	return result, a.tx.Find(&result)
}

func (a reviewPOBelongsToUserTx) Append(values ...*po.UserPO) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a reviewPOBelongsToUserTx) Replace(values ...*po.UserPO) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a reviewPOBelongsToUserTx) Delete(values ...*po.UserPO) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a reviewPOBelongsToUserTx) Clear() error {
	return a.tx.Clear()
}

func (a reviewPOBelongsToUserTx) Count() int64 {
	return a.tx.Count()
}

type reviewPODo struct{ gen.DO }

type IReviewPODo interface {
	gen.SubQuery
	Debug() IReviewPODo
	WithContext(ctx context.Context) IReviewPODo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IReviewPODo
	WriteDB() IReviewPODo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IReviewPODo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IReviewPODo
	Not(conds ...gen.Condition) IReviewPODo
	Or(conds ...gen.Condition) IReviewPODo
	Select(conds ...field.Expr) IReviewPODo
	Where(conds ...gen.Condition) IReviewPODo
	Order(conds ...field.Expr) IReviewPODo
	Distinct(cols ...field.Expr) IReviewPODo
	Omit(cols ...field.Expr) IReviewPODo
	Join(table schema.Tabler, on ...field.Expr) IReviewPODo
	LeftJoin(table schema.Tabler, on ...field.Expr) IReviewPODo
	RightJoin(table schema.Tabler, on ...field.Expr) IReviewPODo
	Group(cols ...field.Expr) IReviewPODo
	Having(conds ...gen.Condition) IReviewPODo
	Limit(limit int) IReviewPODo
	Offset(offset int) IReviewPODo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IReviewPODo
	Unscoped() IReviewPODo
	Create(values ...*po.ReviewPO) error
	CreateInBatches(values []*po.ReviewPO, batchSize int) error
	Save(values ...*po.ReviewPO) error
	First() (*po.ReviewPO, error)
	Take() (*po.ReviewPO, error)
	Last() (*po.ReviewPO, error)
	Find() ([]*po.ReviewPO, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*po.ReviewPO, err error)
	FindInBatches(result *[]*po.ReviewPO, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*po.ReviewPO) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IReviewPODo
	Assign(attrs ...field.AssignExpr) IReviewPODo
	Joins(fields ...field.RelationField) IReviewPODo
	Preload(fields ...field.RelationField) IReviewPODo
	FirstOrInit() (*po.ReviewPO, error)
	FirstOrCreate() (*po.ReviewPO, error)
	FindByPage(offset int, limit int) (result []*po.ReviewPO, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IReviewPODo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r reviewPODo) Debug() IReviewPODo {
	return r.withDO(r.DO.Debug())
}

func (r reviewPODo) WithContext(ctx context.Context) IReviewPODo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r reviewPODo) ReadDB() IReviewPODo {
	return r.Clauses(dbresolver.Read)
}

func (r reviewPODo) WriteDB() IReviewPODo {
	return r.Clauses(dbresolver.Write)
}

func (r reviewPODo) Session(config *gorm.Session) IReviewPODo {
	return r.withDO(r.DO.Session(config))
}

func (r reviewPODo) Clauses(conds ...clause.Expression) IReviewPODo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r reviewPODo) Returning(value interface{}, columns ...string) IReviewPODo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r reviewPODo) Not(conds ...gen.Condition) IReviewPODo {
	return r.withDO(r.DO.Not(conds...))
}

func (r reviewPODo) Or(conds ...gen.Condition) IReviewPODo {
	return r.withDO(r.DO.Or(conds...))
}

func (r reviewPODo) Select(conds ...field.Expr) IReviewPODo {
	return r.withDO(r.DO.Select(conds...))
}

func (r reviewPODo) Where(conds ...gen.Condition) IReviewPODo {
	return r.withDO(r.DO.Where(conds...))
}

func (r reviewPODo) Order(conds ...field.Expr) IReviewPODo {
	return r.withDO(r.DO.Order(conds...))
}

func (r reviewPODo) Distinct(cols ...field.Expr) IReviewPODo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r reviewPODo) Omit(cols ...field.Expr) IReviewPODo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r reviewPODo) Join(table schema.Tabler, on ...field.Expr) IReviewPODo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r reviewPODo) LeftJoin(table schema.Tabler, on ...field.Expr) IReviewPODo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r reviewPODo) RightJoin(table schema.Tabler, on ...field.Expr) IReviewPODo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r reviewPODo) Group(cols ...field.Expr) IReviewPODo {
	return r.withDO(r.DO.Group(cols...))
}

func (r reviewPODo) Having(conds ...gen.Condition) IReviewPODo {
	return r.withDO(r.DO.Having(conds...))
}

func (r reviewPODo) Limit(limit int) IReviewPODo {
	return r.withDO(r.DO.Limit(limit))
}

func (r reviewPODo) Offset(offset int) IReviewPODo {
	return r.withDO(r.DO.Offset(offset))
}

func (r reviewPODo) Scopes(funcs ...func(gen.Dao) gen.Dao) IReviewPODo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r reviewPODo) Unscoped() IReviewPODo {
	return r.withDO(r.DO.Unscoped())
}

func (r reviewPODo) Create(values ...*po.ReviewPO) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r reviewPODo) CreateInBatches(values []*po.ReviewPO, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r reviewPODo) Save(values ...*po.ReviewPO) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r reviewPODo) First() (*po.ReviewPO, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*po.ReviewPO), nil
	}
}

func (r reviewPODo) Take() (*po.ReviewPO, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*po.ReviewPO), nil
	}
}

func (r reviewPODo) Last() (*po.ReviewPO, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*po.ReviewPO), nil
	}
}

func (r reviewPODo) Find() ([]*po.ReviewPO, error) {
	result, err := r.DO.Find()
	return result.([]*po.ReviewPO), err
}

func (r reviewPODo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*po.ReviewPO, err error) {
	buf := make([]*po.ReviewPO, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r reviewPODo) FindInBatches(result *[]*po.ReviewPO, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r reviewPODo) Attrs(attrs ...field.AssignExpr) IReviewPODo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r reviewPODo) Assign(attrs ...field.AssignExpr) IReviewPODo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r reviewPODo) Joins(fields ...field.RelationField) IReviewPODo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r reviewPODo) Preload(fields ...field.RelationField) IReviewPODo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r reviewPODo) FirstOrInit() (*po.ReviewPO, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*po.ReviewPO), nil
	}
}

func (r reviewPODo) FirstOrCreate() (*po.ReviewPO, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*po.ReviewPO), nil
	}
}

func (r reviewPODo) FindByPage(offset int, limit int) (result []*po.ReviewPO, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r reviewPODo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r reviewPODo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r reviewPODo) Delete(models ...*po.ReviewPO) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *reviewPODo) withDO(do gen.Dao) *reviewPODo {
	r.DO = *do.(*gen.DO)
	return r
}
